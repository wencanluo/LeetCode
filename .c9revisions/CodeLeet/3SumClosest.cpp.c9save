{"ts":1377020703004,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*3SumJan 18 '123993 / 15001\r\nGiven an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\r\n\r\nNote:\r\n\r\nElements in a triplet (a,b,c) must be in non-descending order. (ie, a ? b ? c)\r\nThe solution set must not contain duplicate triplets.\r\n    For example, given array S = {-1 0 1 2 -1 -4},\r\n\r\n    A solution set is:\r\n    (-1, 0, 1)\r\n    (-1, -1, 2)\r\n\t\r\nAuthor: Wencan Luo\r\nLanguage: C++\r\nDate: 08/29/2012\t\r\n*/\r\n\t\r\n#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n\r\nusing namespace std;\r\n\r\nclass Solution {\r\npublic:\r\n\tvector<vector<int> > threeSum(vector<int> &num) {//n^2\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        vector< vector<int> > res;\r\n\r\n\t\tif(num.size() < 3) return res;\r\n\r\n\t\t//sort\r\n\t\tsort(num.begin(), num.end());\r\n\r\n\t\t//check one by one\r\n\t\tvector<int>::iterator it1,it2,it3;\r\n\r\n\t\tfor(it1=num.begin();it1<num.end()-2;it1++)\r\n\t\t{\r\n\t\t\tit2 = it1+1;\r\n\t\t\tit3 = num.end() - 1;\r\n\t\t\twhile(it2 < it3)\r\n\t\t\t{\r\n\t\t\t\tif(0 == *it1 + *it2 + *it3)//adjust the pos according to the sum\r\n\t\t\t\t{\r\n\t\t\t\t\tvector<int> tmp;\r\n\t\t\t\t\ttmp.push_back(*it1);\r\n\t\t\t\t\ttmp.push_back(*it2);\r\n\t\t\t\t\ttmp.push_back(-*it1 - *it2);\r\n\t\t\t\t\tres.push_back(tmp);\r\n\t\t\t\t\tit2++;\r\n\t\t\t\t\tit3--;\r\n\t\t\t\t}\r\n\t\t\t\telse if(0 < *it1 + *it2 + *it3)\r\n\t\t\t\t{\r\n\t\t\t\t\tit3--;\r\n\t\t\t\t}\r\n\t\t\t\telse // 0 > ..\r\n\t\t\t\t{\r\n\t\t\t\t\tit2++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//remove duplicate ones\r\n\t\tsort(res.begin(), res.end());\r\n\t\tvector< vector<int> >::iterator it;\r\n\t\tit = unique(res.begin(), res.end());\r\n\t\tres.resize(it - res.begin());\r\n\r\n\t\treturn res;\r\n    }\r\n\r\n    vector<vector<int> > threeSum2(vector<int> &num) {//n^2 log(n)\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        vector< vector<int> > res;\r\n\r\n\t\t//sort\r\n\t\tsort(num.begin(), num.end());\r\n\r\n\t\t//check one by one\r\n\t\tvector<int>::iterator it1,it2,it3;\r\n\r\n\t\tfor(it1=num.begin();it1<num.end();it1++)\r\n\t\t{\r\n\t\t\tfor(it2=it1+1;it2<num.end();it2++)\r\n\t\t\t{\r\n\t\t\t\t//divide and conque to find the third one\r\n\t\t\t\tif( true == binary_search(it2+1, num.end(), -*it1 - *it2))\r\n\t\t\t\t{\r\n\t\t\t\t\tvector<int> tmp;\r\n\t\t\t\t\ttmp.push_back(*it1);\r\n\t\t\t\t\ttmp.push_back(*it2);\r\n\t\t\t\t\ttmp.push_back(-*it1 - *it2);\r\n\t\t\t\t\tres.push_back(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//remove duplicate ones\r\n\t\tsort(res.begin(), res.end());\r\n\t\tvector< vector<int> >::iterator it;\r\n\t\tit = unique(res.begin(), res.end());\r\n\t\tres.resize(it - res.begin());\r\n\r\n\t\treturn res;\r\n    }\r\n\r\n\tvector<vector<int> > threeSum1(vector<int> &num) {//n^3\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        vector< vector<int> > res;\r\n\r\n\t\t//sort\r\n\t\tsort(num.begin(), num.end());\r\n\r\n\t\t//check one by one\r\n\t\tvector<int>::iterator it1,it2,it3;\r\n\r\n\t\tfor(it1=num.begin();it1<num.end();it1++)\r\n\t\t{\r\n\t\t\tfor(it2=it1+1;it2<num.end();it2++)\r\n\t\t\t{\r\n\t\t\t\tfor(it3=it2+1;it3<num.end();it3++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(0 == *it1 + *it2 + *it3)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvector<int> tmp;\r\n\t\t\t\t\t\ttmp.push_back(*it1);\r\n\t\t\t\t\t\ttmp.push_back(*it2);\r\n\t\t\t\t\t\ttmp.push_back(*it3);\r\n\t\t\t\t\t\tres.push_back(tmp);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//remove duplicate ones\r\n\t\tsort(res.begin(), res.end());\r\n\t\tvector< vector<int> >::iterator it;\r\n\t\tit = unique(res.begin(), res.end());\r\n\t\tres.resize(it - res.begin());\r\n\r\n\t\treturn res;\r\n    }\r\n};\r\n\r\nvoid main()\r\n{\r\n\tint a[] = {1};\r\n\tvector<int> num(a, a + sizeof(a)/sizeof(int));\r\n\r\n\tSolution s;\r\n\tvector<vector<int> > sum = s.threeSum(num);\r\n\r\n\tvector<vector<int> >::iterator iter;\r\n\r\n\tfor(iter=sum.begin();iter<sum.end();iter++)\r\n\t{\r\n\t\tvector<int>::iterator it;\r\n\r\n\t\tfor(it = (*iter).begin(); it < (*iter).end(); it++)\r\n\t\t{\r\n\t\t\tcout << *it << \",\";\r\n\t\t}\r\n\t\tcout << endl;\r\n\t}\r\n\r\n\tsystem(\"pause\");\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":3771}]],"length":3771}
{"contributors":[],"silentsave":false,"ts":1377020713434,"patch":[[{"diffs":[[0,"/*3Sum"],[1," Closest "],[0,"Jan 18 '"]],"start1":0,"start2":0,"length1":14,"length2":23},{"diffs":[[0," '12"],[-1,"3993 / 15001"],[1,"5687 / 14868"],[0,"\r\nGi"]],"start1":21,"start2":21,"length1":20,"length2":20},{"diffs":[[0,"rs, "],[-1,"are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\r\n\r\nNote:\r\n\r\nElements in a triplet (a,b,c) must be in non-descending order. (ie, a ? b ? c)\r\nThe solution set must not contain duplicate triplets."],[1,"find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\r\n"],[0,"\r\n  "]],"start1":67,"start2":67,"length1":277,"length2":192},{"diffs":[[0,"{-1 "],[-1,"0 1 "],[0,"2 "],[-1,"-"],[0,"1 -4},"],[-1,"\r\n\r\n    A solution set is:\r\n    (-1, 0, 1)\r\n    (-1, -1,"],[1," and target = 1.\r\n\r\n    The sum that is closest to the target is 2. (-1 + 2 + 1 ="],[0," 2)"],[1,"."],[0,"\r\n\t\r"]],"start1":290,"start2":290,"length1":80,"length2":101}]],"length":3716,"saved":false}
{"ts":1377020714245,"patch":[[{"diffs":[[0,"/*3"],[1," "],[0,"Sum Clos"]],"start1":0,"start2":0,"length1":11,"length2":12}]],"length":3717,"saved":false}
{"ts":1377020735155,"patch":[[{"diffs":[[0,"ublic:\r\n"],[-1,"\tvector<vector<int> >"],[1,"    int"],[0," threeSu"]],"start1":561,"start2":561,"length1":37,"length2":23},{"diffs":[[0,"threeSum"],[1,"Closest"],[0,"(vector<"]],"start1":577,"start2":577,"length1":16,"length2":23},{"diffs":[[0,"nt> &num"],[-1,") {//n^2"],[1,", int target) {"],[0,"\r\n      "]],"start1":601,"start2":601,"length1":24,"length2":31},{"diffs":[[0,"on\r\n"],[1,""],[0,"        "],[-1,"vector< vector<int> > res;\r\n\r\n\t\tif(num.size() < 3) return res;\r\n\r\n\t\t//sort\r\n\t\tsort(num.begin(), num.end());\r\n\r\n\t\t//check one by one\r\n\t\tvector<int>::iterator it1,it2,it3;\r\n\r\n\t\tfor(it1=num.begin();it1<num.end()-2;it1++)\r\n\t\t{\r\n\t\t\tit2 = it1+1;\r\n\t\t\tit3 = num.end() - 1;\r\n\t\t\twhile(it2 < it3)\r\n\t\t\t{\r\n\t\t\t\tif(0 == *it1 + *it2 + *it3)//adjust the pos according to the sum\r\n\t\t\t\t{\r\n\t\t\t\t\tvector<int> tmp;\r\n\t\t\t\t\ttmp.push_back(*it1);\r\n\t\t\t\t\ttmp.push_back(*it2);\r\n\t\t\t\t\ttmp.push_back(-*it1 - *it2);\r\n\t\t\t\t\tres.push_back(tmp);\r\n\t\t\t\t\tit2++;\r\n\t\t\t\t\tit3--;\r\n\t\t\t\t}\r\n\t\t\t\telse if(0 < *it1 + *it2 + *it3)\r\n\t\t\t\t{\r\n\t\t\t\t\tit3--;\r\n\t\t\t\t}\r\n\t\t\t\telse // 0 > ..\r\n\t\t\t\t{\r\n\t\t\t\t\tit2++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//remove duplicate ones\r\n\t\tsort(res.begin(), res.end());\r\n\t\tvector< vector<int> >::iterator it;\r\n\t\tit = unique(res.begin(), res.end());\r\n\t\tres.resize(it - res.begin());\r\n\r\n\t\treturn res;\r\n    }\r\n\r\n    vector<vector<int> > threeSum2(vector<int> &num) {//n^2 log(n)\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        vector< vector<int> > res;\r\n\r\n\t\t//sort\r\n\t\tsort(num.begin(), num.end());\r\n\r\n\t\t//check one by one\r\n\t\tvector<int>::iterator it1,it2,it3;\r\n\r\n\t\tfor(it1=num.begin();it1<num.end();it1++)\r\n\t\t{\r\n\t\t\tfor(it2=it1+1;it2<num.end();it2++)\r\n\t\t\t{\r\n\t\t\t\t//divide and conque to find the third one\r\n\t\t\t\tif( true == binary_search(it2+1, num.end(), -*it1 - *it2))\r\n\t\t\t\t{\r\n\t\t\t\t\tvector<int> tmp;\r\n\t\t\t\t\ttmp.push_back(*it1);\r\n\t\t\t\t\ttmp.push_back(*it2);\r\n\t\t\t\t\ttmp.push_back(-*it1 - *it2);\r\n\t\t\t\t\tres.push_back(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//remove duplicate ones\r\n\t\tsort(res.begin(), res.end());\r\n\t\tvector< vector<int> >::iterator it;\r\n\t\tit = unique(res.begin(), res.end());\r\n\t\tres.resize(it - res.begin());\r\n\r\n\t\treturn res;\r\n    }\r\n\r\n\tvector<vector<int> > threeSum1(vector<int> &num) {//n^3\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        vector< vector<int> > res;\r\n\r\n\t\t//sort\r\n\t\tsort(num.begin(), num.end());\r\n\r\n\t\t//check one by one\r\n\t\tvector<int>::iterator it1,it2,it3;\r\n\r\n\t\tfor(it1=num.begin();it1<num.end();it1++)\r\n\t\t{\r\n\t\t\tfor(it2=it1+1;it2<num.end();it2++)\r\n\t\t\t{\r\n\t\t\t\tfor(it3=it2+1;it3<num.end();it3++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(0 == *it1 + *it2 + *it3)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvector<int> tmp;\r\n\t\t\t\t\t\ttmp.push_back(*it1);\r\n\t\t\t\t\t\ttmp.push_back(*it2);\r\n\t\t\t\t\t\ttmp.push_back(*it3);\r\n\t\t\t\t\t\tres.push_back(tmp);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//remove duplicate ones\r\n\t\tsort(res.begin(), res.end());\r\n\t\tvector< vector<int> >::iterator it;\r\n\t\tit = unique(res.begin(), res.end());\r\n\t\tres.resize(it - res.begin());\r\n\r\n\t\treturn res;"],[0,"\r\n  "]],"start1":718,"start2":718,"length1":2588,"length2":16}]],"length":1145,"saved":false}
{"ts":1377020770532,"patch":[[{"diffs":[[0,"threeSum"],[1,"Closest"],[0,"(num);\r\n"]],"start1":873,"start2":873,"length1":16,"length2":23}]],"length":1152,"saved":false}
{"ts":1377020798333,"patch":[[{"diffs":[[0,"{\r\n\t"],[-1,"int a[] = {1};\r\n\tvector<int> num(a, a + sizeof(a)/sizeof(int));\r\n\r\n\tSolution s;\r\n\tvector<vector<int> > sum = s.threeSumClosest(num);\r\n\r\n\tvector<vector<int> >::iterator iter;\r\n\r\n\tfor(iter=sum.begin();iter<sum.end();iter++)\r\n\t{\r\n\t\tvector<int>::iterator it;\r\n\r\n\t\tfor(it = (*iter).begin(); it < (*iter).end(); it++)\r\n\t\t{\r\n\t\t\tcout << *it << \",\";\r\n\t\t}\r\n\t\tcout << endl;\r\n\t}\r\n"],[1,"Solution s;"],[0,"\r\n\ts"]],"start1":758,"start2":758,"length1":376,"length2":19}]],"length":795,"saved":false}
{"ts":1377020890743,"patch":[[{"diffs":[[0,"nction\r\n"],[1,"        int n=num.size();\r\n"],[0,"        "]],"start1":714,"start2":714,"length1":16,"length2":43}]],"length":822,"saved":false}
{"ts":1377021766570,"patch":[[{"diffs":[[0," = 2).\r\n"],[-1,"\t"],[1,"    "],[0,"\r\nAuthor"]],"start1":382,"start2":382,"length1":17,"length2":20},{"diffs":[[0,"    "],[-1,"\r\n    }\r\n};\r\n\r\nvoid main()\r\n{\r\n\tSolution s;"],[1,"if(n<=2) return 0;\r\n\t\t\r\n\t\tint sum = 0;\r\n\t\tint closestSum = num[0] + num[1] + num[2];\r\n\r\n\t\tsort(num.begin(), num.end());\r\n\r\n\t\tfor(int i=0;i<n;i++){\r\n\t\t\tint j = i + 1;\r\n\t\t\tint k = n-1;\r\n\r\n\t\t\twhile(j < k){\r\n\t\t\t\tsum = num[i] + num[j] + num[k];\r\n\t\t\t\tif(abs(sum-target) < abs(closestSum - target)){\r\n\t\t\t\t\tclosestSum = sum;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(sum == target) return target;\r\n\t\t\t\tif(sum < target){\r\n\t\t\t\t\tj++;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tk--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn closestSum;\r\n    }\r\n};\r\n\r\nvoid main()\r\n{\r\n\tSolution s;\r\n\r\n\tint a[] = {1,2,3};\r\n\tvector<int> v(a, a+sizeof(a)/sizeof(a[0]));\r\n\r\n\tcout << s.threeSumClosest(v, 0);\r\n"],[0,"\r\n\ts"]],"start1":756,"start2":756,"length1":51,"length2":619}]],"length":1393,"saved":false}
