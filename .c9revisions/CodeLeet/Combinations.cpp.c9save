{"ts":1374870139811,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*Combinations Apr 18 '123948 / 9781\r\nGiven two integers n and k, return all possible combinations of k numbers out of 1 ... n.\r\n\r\nFor example,\r\nIf n = 4 and k = 2, a solution is:\r\n\r\n[\r\n  [2,4],\r\n  [3,4],\r\n  [2,3],\r\n  [1,2],\r\n  [1,3],\r\n  [1,4],\r\n]\r\n\r\nAuthor: Wencan Luo\r\nLanguage: C++\r\nDate: 07/25/2013\r\n*/\r\n\r\n#include<iostream>\r\nusing namespace std;\r\n\r\n#include<vector>\r\n#include<string>\r\n#include<algorithm>\r\n\r\n#include<map>\r\n//#include<unordered_set>\r\n\r\n#include<queue>\r\n#include<set>\r\n\r\n// Definition for binary tree\r\n struct TreeNode {\r\n     int val;\r\n     TreeNode *left;\r\n     TreeNode *right;\r\n TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n};\r\n \r\nclass Solution {\r\npublic:\r\n    vector<vector<int> > combine(int n, int k) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        vector<vector<int> > res;\r\n\t\tif(k==0) return res;\r\n\t\tif(k>n) return res;\r\n\r\n\t\tif(k==1){\r\n\t\t\tfor(int i=1;i<=n;i++){\r\n\t\t\t\tvector<int> tmp;\r\n\t\t\t\ttmp.push_back(i);\r\n\t\t\t\tres.push_back(tmp);\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t}\r\n\t\t\r\n\t\tres = combine(n-1,k);\r\n\t\tvector< vector<int> > n1k1 = combine(n-1,k-1);\r\n\r\n\t\tfor(int i=0;i<n1k1.size();i++){\r\n\t\t\tvector<int> tmp = n1k1[i];\r\n\t\t\ttmp.push_back(n);\r\n\t\t\tres.push_back(tmp);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n    }\r\n};\r\n\r\nvoid main(){\r\n\tSolution s;\r\n\t\r\n\tvector<vector<int> > res = s.combine(4,2);\r\n\r\n\tfor(int i=0;i<res.size();i++){\r\n\t\tvector<int> tmp = res[i];\r\n\t\tfor(int j=0;j<tmp.size();j++){\r\n\t\t\tcout << tmp[j] << \",\";\r\n\t\t}\r\n\t\tcout << endl;\r\n\t}\r\n\r\n\tsystem(\"pause\");\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":1537}]],"length":1537}
