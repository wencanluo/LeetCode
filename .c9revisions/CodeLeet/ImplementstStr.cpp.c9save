{"ts":1376347665915,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*Multiply StringsMar 12 '123693 / 14018\r\nGiven two numbers represented as strings, return multiplication of the numbers as a string.\r\nNote: The numbers can be arbitrarily large and are non-negative.\r\n\r\nAuthor: Wencan Luo\r\nLanguage: C++\r\nDate: 08/04/2013\r\n*/\r\n\r\n#include<iostream>\r\nusing namespace std;\r\n#include<climits>\r\n\r\n#include<vector>\r\n#include<string>\r\n#include<algorithm>\r\n#include<sstream>\r\n\r\n#include<map>\r\n//#include<unordered_set>\r\n\r\n#include<queue>\r\n#include<set>\r\n\r\n// Definition for binary tree\r\n struct TreeNode {\r\n     int val;\r\n     TreeNode *left;\r\n     TreeNode *right;\r\n TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n};\r\n\r\n//Definition for singly-linked list.\r\nstruct ListNode {\r\n    int val;\r\n    ListNode *next;\r\n    ListNode(int x) : val(x), next(NULL) {}\r\n};\r\n\r\n// Definition for an interval.\r\nstruct Interval {\r\n    int start;\r\n    int end;\r\n    Interval() : start(0), end(0) {}\r\n    Interval(int s, int e) : start(s), end(e) {}\r\n};\r\n\r\nclass Solution {\r\npublic:\r\n    char add(char c1, char c2, int &overflow){\r\n        int r = c1-'0' + c2-'0' + overflow;\r\n        if(r >= 10){\r\n            overflow = 1;\r\n            r -= 10;\r\n        }else{\r\n            overflow = 0;\r\n        }\r\n        \r\n        return r+'0';\r\n    }\r\n    \r\n    string add(string num1, string num2){\r\n        string R = \"\";\r\n        if(num1 == \"0\") return num2;\r\n        if(num2 == \"0\") return num1;\r\n        \r\n        int i = num1.size() -1;\r\n        int j = num2.size() -1;\r\n        int overflow = 0;\r\n        \r\n        while(i >=0 && j>=0){\r\n            char c = add(num1[i], num2[j], overflow);\r\n            R = c + R;\r\n            i--;\r\n            j--;\r\n        }\r\n        \r\n        while(i >= 0){\r\n            char c = add(num1[i], '0', overflow);\r\n            R = c + R;\r\n            i--;\r\n        }\r\n        \r\n        while(j >= 0){\r\n            char c = add('0', num2[j], overflow);\r\n            R = c + R;\r\n            j--;\r\n        }\r\n        \r\n        if(overflow == 1){\r\n            R = '1' + R;\r\n        }\r\n        \r\n        return R;\r\n    }\r\n    \r\n    string multiply(char c1, char c2){\r\n        int number = (c1-'0')*(c2-'0');\r\n        stringstream ss;//create a stringstream\r\n        ss << number;//add number to the stream\r\n        return ss.str();//return a string with the contents of the stream\r\n    }\r\n    \r\n    string multiply(string num1, char c){\r\n        if(c=='0') return \"0\";\r\n        string R = \"0\";\r\n        string z = \"\";\r\n        for(int i=num1.size()-1;i>=0;i--){\r\n            string s = multiply(num1[i], c);\r\n            s += z;\r\n            R = add(R,s);\r\n            z += \"0\";\r\n        }\r\n        return R;\r\n    }\r\n    \r\n    string multiply(string num1, string num2) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        int m = num1.size();\r\n        int n = num2.size();\r\n        \r\n        if(m==0 || n==0) return \"0\";\r\n        if(num1 == \"0\" || num2 == \"0\") return \"0\";\r\n        \r\n        string R = \"0\";\r\n        \r\n        string z = \"\";\r\n        \r\n        vector<string> M;\r\n        M.resize(10, \"\");\r\n        \r\n        for(int i=n-1;i>=0;i--){//for each digit in num2\r\n            //multiply it to num1\r\n            string s;\r\n            char c = num2[i];\r\n            if(M[c-'0'] == \"\"){\r\n                s = multiply(num1, c);\r\n                M[c-'0'] = s;\r\n            }else{\r\n                s = M[c-'0'];\r\n            }\r\n            \r\n            s += z;\r\n            R = add(R, s);\r\n            z += \"0\";\r\n        }\r\n        \r\n        return R;\r\n    }\r\n};\r\n\r\nvoid main(){\r\n    Solution s;\r\n\r\n\t//cout << s.multiply(\"123\",'9') << endl;\r\n\r\n\t//cout << s.add(\"123\",\"0\") << endl;\r\n\tcout << s.multiply(\"123\",\"123\") << endl;\r\n\t//int overflow = 0;\r\n\t//cout << s.add('9','1', overflow) << endl;\r\n\t//cout << s.add(\"9\",\"1\") << endl;\r\n    \r\n\tsystem(\"pause\");\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":3858}]],"length":3858}
{"contributors":[],"silentsave":false,"ts":1376347669515,"patch":[[{"diffs":[[0," 08/"],[-1,"04"],[1,"12"],[0,"/201"]],"start1":243,"start2":243,"length1":10,"length2":10}]],"length":3858,"saved":false}
{"ts":1376347677678,"patch":[[{"diffs":[[0,"/*"],[-1,"Multiply StringsMar 12"],[1,"Implement strStr()Feb 18"],[0," '12"],[-1,"3693 / 14018\r\nGiven two numbers represented as strings, return multiplication of the numbers as a string.\r\nNote: The numbers can be arbitrarily large and are non-negative"],[1,"6159 / 19459\r\nImplement strStr().\r\n\r\nReturns a pointer to the first occurrence of needle in haystack, or null if needle is not part of haystack"],[0,".\r\n\r"]],"start1":0,"start2":0,"length1":202,"length2":177}]],"length":3833,"saved":false}
{"ts":1376347718206,"patch":[[{"diffs":[[0,"har "],[-1,"add(char c1, char c2, int &overflow){\r\n        int r = c1-'0' + c2-'0' + overflow;\r\n        if(r >= 10){\r\n            overflow = 1;\r\n            r -= 10;\r\n        }else{\r\n            overflow = 0;\r\n        }\r\n        \r\n        return r+'0';\r\n    }\r\n    \r\n    string add(string num1, string num2){\r\n        string R = \"\";\r\n        if(num1 == \"0\") return num2;\r\n        if(num2 == \"0\") return num1;\r\n        \r\n        int i = num1.size() -1;\r\n        int j = num2.size() -1;\r\n        int overflow = 0;\r\n        \r\n        while(i >=0 && j>=0){\r\n            char c = add(num1[i], num2[j], overflow);\r\n            R = c + R;\r\n            i--;\r\n            j--;\r\n        }\r\n        \r\n        while(i >= 0){\r\n            char c = add(num1[i], '0', overflow);\r\n            R = c + R;\r\n            i--;\r\n        }\r\n        \r\n        while(j >= 0){\r\n            char c = add('0', num2[j], overflow);\r\n            R = c + R;\r\n            j--;\r\n        }\r\n        \r\n        if(overflow == 1){\r\n            R = '1' + R;\r\n        }\r\n        \r\n        return R;\r\n    }\r\n    \r\n    string multiply(char c1, char c2){\r\n        int number = (c1-'0')*(c2-'0');\r\n        stringstream ss;//create a stringstream\r\n        ss << number;//add number to the stream\r\n        return ss.str();//return a string with the contents of the stream\r\n    }\r\n    \r\n    string multiply(string num1, char c){\r\n        if(c=='0') return \"0\";\r\n        string R = \"0\";\r\n        string z = \"\";\r\n        for(int i=num1.size()-1;i>=0;i--){\r\n            string s = multiply(num1[i], c);\r\n            s += z;\r\n            R = add(R,s);\r\n            z += \"0\";\r\n        }\r\n        return R;\r\n    }\r\n    \r\n    string multiply(string num1, string num2) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        int m = num1.size();\r\n        int n = num2.size();\r\n        \r\n        if(m==0 || n==0) return \"0\";\r\n        if(num1 == \"0\" || num2 == \"0\") return \"0\";\r\n        \r\n        string R = \"0\";\r\n        \r\n        string z = \"\";\r\n        \r\n        vector<string> M;\r\n        M.resize(10, \"\");\r\n        \r\n        for(int i=n-1;i>=0;i--){//for each digit in num2\r\n            //multiply it to num1\r\n            string s;\r\n            char c = num2[i];\r\n            if(M[c-'0'] == \"\"){\r\n                s = multiply(num1, c);\r\n                M[c-'0'] = s;\r\n            }else{\r\n                s = M[c-'0'];\r\n            }\r\n            \r\n            s += z;\r\n            R = add(R, s);\r\n            z += \"0\";\r\n        }\r\n        \r\n        return R;"],[1,"*strStr(char *haystack, char *needle) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        "],[0,"\r\n  "]],"start1":978,"start2":978,"length1":2553,"length2":153}]],"length":1433,"saved":false}
{"ts":1376347724831,"patch":[[{"diffs":[[0,"\n\r\n\t"],[-1,"//cout << s.multiply(\"123\",'9') << endl;\r\n\r\n\t//cout << s.add(\"123\",\"0\") << endl;\r\n\tcout << s.multiply(\"123\",\"123\") << endl;\r\n\t//int overflow = 0;\r\n\t//cout << s.add('9','1', overflow) << endl;\r\n\t//cout << s.add(\"9\",\"1\") << endl;"],[0,"\r\n  "]],"start1":1172,"start2":1172,"length1":235,"length2":8}]],"length":1206,"saved":false}
