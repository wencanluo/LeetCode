{"ts":1375404237326,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*Length of Last WordMar 27 '123781 / 9150\r\nGiven a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word in the string.\r\n\r\nIf the last word does not exist, return 0.\r\nNote: A word is defined as a character sequence consists of non-space characters only.\r\nFor example, \r\nGiven s = \"Hello World\",\r\nreturn 5.\r\n\r\nAuthor: Wencan Luo\r\nLanguage: C++\r\nDate: 08/01/2013\r\n*/\r\n\r\n#include<iostream>\r\nusing namespace std;\r\n\r\n#include<vector>\r\n#include<string>\r\n#include<algorithm>\r\n\r\n#include<map>\r\n//#include<unordered_set>\r\n\r\n#include<queue>\r\n#include<set>\r\n\r\n// Definition for binary tree\r\n struct TreeNode {\r\n     int val;\r\n     TreeNode *left;\r\n     TreeNode *right;\r\n TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n};\r\n \r\nclass Solution {\r\npublic:\r\n    int lengthOfLastWord(const char *s) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        if(s==NULL) return 0;\r\n        if(*s == '\\0') return 0;\r\n        \r\n        int k=0;\r\n        \r\n        int i=0;\r\n        while(s[i] != '\\0'){\r\n            \r\n            if(s[i] == ' ' && (s[i+1] != ' ' && s[i+1] != '\\0') ){//word starts\r\n                k = 0;\r\n            }else if(s[i] != ' '){//word continue\r\n                k++;\r\n            }\r\n            \r\n            i++;\r\n        }\r\n        \r\n        return k;\r\n    }\r\n};\r\n\r\nvoid main(){\r\n    Solution s;\r\n\t\r\n\tcout << s.lengthOfLastWord(\"\") << endl;\r\n\tcout << s.lengthOfLastWord(\"   \") << endl;\r\n\tcout << s.lengthOfLastWord(\"a   aab\") << endl;\r\n\tcout << s.lengthOfLastWord(\"a   bbb \") << endl;\r\n\r\n\tsystem(\"pause\");\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":1633}]],"length":1633}
