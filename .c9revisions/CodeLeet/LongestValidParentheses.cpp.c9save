{"ts":1376090885424,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*Multiply StringsMar 12 '123693 / 14018\r\nGiven two numbers represented as strings, return multiplication of the numbers as a string.\r\nNote: The numbers can be arbitrarily large and are non-negative.\r\n\r\nAuthor: Wencan Luo\r\nLanguage: C++\r\nDate: 08/04/2013\r\n*/\r\n\r\n#include<iostream>\r\nusing namespace std;\r\n#include<climits>\r\n\r\n#include<vector>\r\n#include<string>\r\n#include<algorithm>\r\n#include<sstream>\r\n\r\n#include<map>\r\n//#include<unordered_set>\r\n\r\n#include<queue>\r\n#include<set>\r\n\r\n// Definition for binary tree\r\n struct TreeNode {\r\n     int val;\r\n     TreeNode *left;\r\n     TreeNode *right;\r\n TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n};\r\n\r\n//Definition for singly-linked list.\r\nstruct ListNode {\r\n    int val;\r\n    ListNode *next;\r\n    ListNode(int x) : val(x), next(NULL) {}\r\n};\r\n\r\n// Definition for an interval.\r\nstruct Interval {\r\n    int start;\r\n    int end;\r\n    Interval() : start(0), end(0) {}\r\n    Interval(int s, int e) : start(s), end(e) {}\r\n};\r\n\r\nclass Solution {\r\npublic:\r\n    char add(char c1, char c2, int &overflow){\r\n        int r = c1-'0' + c2-'0' + overflow;\r\n        if(r >= 10){\r\n            overflow = 1;\r\n            r -= 10;\r\n        }else{\r\n            overflow = 0;\r\n        }\r\n        \r\n        return r+'0';\r\n    }\r\n    \r\n    string add(string num1, string num2){\r\n        string R = \"\";\r\n        if(num1 == \"0\") return num2;\r\n        if(num2 == \"0\") return num1;\r\n        \r\n        int i = num1.size() -1;\r\n        int j = num2.size() -1;\r\n        int overflow = 0;\r\n        \r\n        while(i >=0 && j>=0){\r\n            char c = add(num1[i], num2[j], overflow);\r\n            R = c + R;\r\n            i--;\r\n            j--;\r\n        }\r\n        \r\n        while(i >= 0){\r\n            char c = add(num1[i], '0', overflow);\r\n            R = c + R;\r\n            i--;\r\n        }\r\n        \r\n        while(j >= 0){\r\n            char c = add('0', num2[j], overflow);\r\n            R = c + R;\r\n            j--;\r\n        }\r\n        \r\n        if(overflow == 1){\r\n            R = '1' + R;\r\n        }\r\n        \r\n        return R;\r\n    }\r\n    \r\n    string multiply(char c1, char c2){\r\n        int number = (c1-'0')*(c2-'0');\r\n        stringstream ss;//create a stringstream\r\n        ss << number;//add number to the stream\r\n        return ss.str();//return a string with the contents of the stream\r\n    }\r\n    \r\n    string multiply(string num1, char c){\r\n        if(c=='0') return \"0\";\r\n        string R = \"0\";\r\n        string z = \"\";\r\n        for(int i=num1.size()-1;i>=0;i--){\r\n            string s = multiply(num1[i], c);\r\n            s += z;\r\n            R = add(R,s);\r\n            z += \"0\";\r\n        }\r\n        return R;\r\n    }\r\n    \r\n    string multiply(string num1, string num2) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        int m = num1.size();\r\n        int n = num2.size();\r\n        \r\n        if(m==0 || n==0) return \"0\";\r\n        if(num1 == \"0\" || num2 == \"0\") return \"0\";\r\n        \r\n        string R = \"0\";\r\n        \r\n        string z = \"\";\r\n        \r\n        vector<string> M;\r\n        M.resize(10, \"\");\r\n        \r\n        for(int i=n-1;i>=0;i--){//for each digit in num2\r\n            //multiply it to num1\r\n            string s;\r\n            char c = num2[i];\r\n            if(M[c-'0'] == \"\"){\r\n                s = multiply(num1, c);\r\n                M[c-'0'] = s;\r\n            }else{\r\n                s = M[c-'0'];\r\n            }\r\n            \r\n            s += z;\r\n            R = add(R, s);\r\n            z += \"0\";\r\n        }\r\n        \r\n        return R;\r\n    }\r\n};\r\n\r\nvoid main(){\r\n    Solution s;\r\n\r\n\t//cout << s.multiply(\"123\",'9') << endl;\r\n\r\n\t//cout << s.add(\"123\",\"0\") << endl;\r\n\tcout << s.multiply(\"123\",\"123\") << endl;\r\n\t//int overflow = 0;\r\n\t//cout << s.add('9','1', overflow) << endl;\r\n\t//cout << s.add(\"9\",\"1\") << endl;\r\n    \r\n\tsystem(\"pause\");\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":3858}]],"length":3858}
{"contributors":[],"silentsave":false,"ts":1376090933140,"patch":[[{"diffs":[[0,"/*"],[-1,"Multiply String"],[1,"Longest Valid Parenthese"],[0,"sMar 1"],[-1,"2"],[0," '12"],[-1,"3693 / 14018\r\nGiven two numbers represented as strings, return multiplication of the numbers as a string.\r\nNote: The numbers can be arbitrarily large an"],[1,"4946 / 17933\r\nGiven a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.\r\n\r\nFor \"(()\", the longest valid parentheses substring is \"()\", which has length = 2.\r\n\r\nAnother example is \")()())\", where the longest vali"],[0,"d "],[1,"p"],[0,"are"],[-1," non-negative"],[1,"ntheses substring is \"()()\", which has length = 4"],[0,".\r\n\r"]],"start1":0,"start2":0,"length1":202,"length2":381}]],"length":4037,"saved":false}
{"ts":1376090937584,"patch":[[{"diffs":[[0,"te: 08/0"],[-1,"4"],[1,"9"],[0,"/2013\r\n*"]],"start1":419,"start2":419,"length1":17,"length2":17}]],"length":4037,"saved":false}
{"ts":1376090949891,"patch":[[{"diffs":[[0,"    "],[-1,"char add(char c1, char c2, int &overflow){\r\n        int r = c1-'0' + c2-'0' + overflow;\r\n        if(r >= 10){\r\n            overflow = 1;\r\n            r -= 10;\r\n        }else{\r\n            overflow = 0;\r\n        }\r\n        \r\n        return r+'0';\r\n    }\r\n    \r\n    string add(string num1, string num2){\r\n        string R = \"\";\r\n        if(num1 == \"0\") return num2;\r\n        if(num2 == \"0\") return num1;\r\n        \r\n        int i = num1.size() -1;\r\n        int j = num2.size() -1;\r\n        int overflow = 0;\r\n        \r\n        while(i >=0 && j>=0){\r\n            char c = add(num1[i], num2[j], overflow);\r\n            R = c + R;\r\n            i--;\r\n            j--;\r\n        }\r\n        \r\n        while(i >= 0){\r\n            char c = add(num1[i], '0', overflow);\r\n            R = c + R;\r\n            i--;\r\n        }\r\n        \r\n        while(j >= 0){\r\n            char c = add('0', num2[j], overflow);\r\n            R = c + R;\r\n            j--;\r\n        }\r\n        \r\n        if(overflow == 1){\r\n            R = '1' + R;\r\n        }\r\n        \r\n        return R;\r\n    }\r\n    \r\n    string multiply(char c1, char c2){\r\n        int number = (c1-'0')*(c2-'0');\r\n        stringstream ss;//create a stringstream\r\n        ss << number;//add number to the stream\r\n        return ss.str();//return a string with the contents of the stream\r\n    }\r\n    \r\n    string multiply(string num1, char c){\r\n        if(c=='0') return \"0\";\r\n        string R = \"0\";\r\n        string z = \"\";\r\n        for(int i=num1.size()-1;i>=0;i--){\r\n            string s = multiply(num1[i], c);\r\n            s += z;\r\n            R = add(R,s);\r\n            z += \"0\";\r\n        }\r\n        return R;\r\n    }\r\n    \r\n    string multiply(string num1, string num2) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        int m = num1.size();\r\n        int n = num2.size();\r\n        \r\n        if(m==0 || n==0) return \"0\";\r\n        if(num1 == \"0\" || num2 == \"0\") return \"0\";\r\n        \r\n        string R = \"0\";\r\n        \r\n        string z = \"\";\r\n        \r\n        vector<string> M;\r\n        M.resize(10, \"\");\r\n        \r\n        for(int i=n-1;i>=0;i--){//for each digit in num2\r\n            //multiply it to num1\r\n            string s;\r\n            char c = num2[i];\r\n            if(M[c-'0'] == \"\"){\r\n                s = multiply(num1, c);\r\n                M[c-'0'] = s;\r\n            }else{\r\n                s = M[c-'0'];\r\n            }\r\n            \r\n            s += z;\r\n            R = add(R, s);\r\n            z += \"0\";\r\n        }\r\n        \r\n        return R;"],[1,"int longestValidParentheses(string s) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        "],[0,"\r\n  "]],"start1":1177,"start2":1177,"length1":2558,"length2":153}]],"length":1632,"saved":false}
{"ts":1376090956331,"patch":[[{"diffs":[[0," s;\r"],[-1,"\n\r\n\t//cout << s.multiply(\"123\",'9') << endl;\r\n\r\n\t//cout << s.add(\"123\",\"0\") << endl;\r\n\tcout << s.multiply(\"123\",\"123\") << endl;\r\n\t//int overflow = 0;\r\n\t//cout << s.add('9','1', overflow) << endl;\r\n\t//cout << s.add(\"9\",\"1\") << endl;\r"],[0,"\n   "]],"start1":1367,"start2":1367,"length1":240,"length2":8}]],"length":1400,"saved":false}
{"ts":1376090962128,"patch":[[{"diffs":[[0,"entheses"],[1," "],[0,"Mar 1 '1"]],"start1":19,"start2":19,"length1":16,"length2":17}]],"length":1401,"saved":false}
{"ts":1376091358873,"patch":[[{"diffs":[[0,"nction\r\n"],[1,"        if(s.size()==0) return 0;\r\n"],[0,"        "]],"start1":1311,"start2":1311,"length1":16,"length2":51}]],"length":1436,"saved":false}
{"ts":1376091845689,"patch":[[{"diffs":[[0,"      \r\n"],[1,"        int n = s.size();\r\n        \r\n        \r\n"],[0,"    }\r\n}"]],"start1":1356,"start2":1356,"length1":16,"length2":63}]],"length":1483,"saved":false}
{"ts":1376091869845,"patch":[[{"diffs":[[0,"  \r\n        "],[1,"vector<int> M;\r\n        M.resize(n, 0);\r\n        \r\n        for(int i=0;i<n;i++){\r\n            \r\n        }"],[0,"\r\n    }\r\n};\r"]],"start1":1397,"start2":1397,"length1":24,"length2":129}]],"length":1588,"saved":false}
{"ts":1376091870887,"patch":[[{"diffs":[[0," 0);\r\n        \r\n"],[1,"        \r\n"],[0,"        for(int "]],"start1":1444,"start2":1444,"length1":32,"length2":42}]],"length":1598,"saved":false}
{"ts":1376091879770,"patch":[[{"diffs":[[0,"      \r\n        "],[1,"int count = 0;"],[0,"\r\n        for(in"]],"start1":1452,"start2":1452,"length1":32,"length2":46}]],"length":1612,"saved":false}
{"ts":1376091882097,"patch":[[{"diffs":[[0,"){\r\n            "],[1,"if()"],[0,"\r\n        }\r\n   "]],"start1":1511,"start2":1511,"length1":32,"length2":36}]],"length":1616,"saved":false}
{"ts":1376091898392,"patch":[[{"diffs":[[0,"     if("],[-1,")"],[1,"s[i] == ')'){\r\n                \r\n            }"],[0,"\r\n      "]],"start1":1522,"start2":1522,"length1":17,"length2":62}]],"length":1661,"saved":false}
{"ts":1376091913613,"patch":[[{"diffs":[[0,"                "],[1,"count--;"],[0,"\r\n            }\r"]],"start1":1545,"start2":1545,"length1":32,"length2":40},{"diffs":[[0,"           }"],[1,"else{\r\n                count++;\r\n            }\r\n            M[i] = count;"],[0,"\r\n        }\r"]],"start1":1572,"start2":1572,"length1":24,"length2":97}]],"length":1742,"saved":false}
{"ts":1376091917565,"patch":[[{"diffs":[[0,"\n        }\r\n"],[1,"        \r\n        \r\n"],[0,"    }\r\n};\r\n\r"]],"start1":1658,"start2":1658,"length1":24,"length2":44}]],"length":1762,"saved":false}
{"ts":1376092065972,"patch":[[{"diffs":[[0,"  \r\n        "],[1,"for(int i=0;i<n;i++){\r\n            for(int j=0;j<n;j++){\r\n                \r\n            }\r\n        }"],[0,"\r\n    }\r\n};\r"]],"start1":1676,"start2":1676,"length1":24,"length2":124}]],"length":1862,"saved":false}
{"ts":1376092071247,"patch":[[{"diffs":[[0," i=0;i<n;i++){\r\n"],[1,"            \r\n"],[0,"            for("]],"start1":1695,"start2":1695,"length1":32,"length2":46}]],"length":1876,"saved":false}
{"ts":1376092079674,"patch":[[{"diffs":[[0,"   }\r\n        \r\n"],[1,"        int max = 0;\r\n"],[0,"        for(int "]],"start1":1664,"start2":1664,"length1":32,"length2":54}]],"length":1898,"saved":false}
{"ts":1376092106470,"patch":[[{"diffs":[[0,"                "],[1,"if(s[j] < 0) break;"],[0,"\r\n            }\r"]],"start1":1782,"start2":1782,"length1":32,"length2":51}]],"length":1917,"saved":false}
{"ts":1376092110477,"patch":[[{"diffs":[[0,"){\r\n"],[-1,"            \r\n"],[0,"    "]],"start1":1729,"start2":1729,"length1":22,"length2":8},{"diffs":[[0,"\n            }\r\n"],[1,"            \r\n            \r\n"],[0,"        }\r\n    }"]],"start1":1804,"start2":1804,"length1":32,"length2":60}]],"length":1931,"saved":false}
{"ts":1376092616784,"patch":[[{"diffs":[[0,"break;\r\n"],[1,"                \r\n"],[0,"        "]],"start1":1797,"start2":1797,"length1":16,"length2":34}]],"length":1949,"saved":false}
{"ts":1376092651537,"patch":[[{"diffs":[[0," i=0;i<n;i++){\r\n"],[1,"            int \r\n"],[0,"            for("]],"start1":1717,"start2":1717,"length1":32,"length2":50}]],"length":1967,"saved":false}
{"ts":1376092661549,"patch":[[{"diffs":[[0,"    int "],[1,"match = 0;\r\n            "],[0,"\r\n      "]],"start1":1741,"start2":1741,"length1":16,"length2":40}]],"length":1991,"saved":false}
{"ts":1376092669322,"patch":[[{"diffs":[[0,"k;\r\n"],[-1,"                \r\n"],[0,"    "]],"start1":1843,"start2":1843,"length1":26,"length2":8}]],"length":1973,"saved":false}
{"ts":1376092681764,"patch":[[{"diffs":[[0,"       }"],[-1,"\r\n            \r\n"],[0,"        "]],"start1":1852,"start2":1852,"length1":32,"length2":16}]],"length":1957,"saved":false}
{"ts":1376092686578,"patch":[[{"diffs":[[0,"       }"],[1,"\r\n"],[0,"        "]],"start1":1852,"start2":1852,"length1":16,"length2":18}]],"length":1959,"saved":false}
{"ts":1376092702881,"patch":[[{"diffs":[[0,"int "],[-1,"match"],[1,"end"],[0," = 0"]],"start1":1745,"start2":1745,"length1":13,"length2":11}]],"length":1957,"saved":false}
{"ts":1376092719298,"patch":[[{"diffs":[[0,"break;\r\n"],[1,"                if(s[j] == 0) end = j;\r\n"],[0,"        "]],"start1":1837,"start2":1837,"length1":16,"length2":56}]],"length":1997,"saved":false}
{"ts":1376092730051,"patch":[[{"diffs":[[0,"r(int j="],[-1,"0"],[1,"i"],[0,";j<n;j++"]],"start1":1787,"start2":1787,"length1":17,"length2":17}]],"length":1997,"saved":false}
{"ts":1376092736185,"patch":[[{"diffs":[[0,"t end = "],[-1,"0"],[1,"-1"],[0,";\r\n     "]],"start1":1747,"start2":1747,"length1":17,"length2":18}]],"length":1998,"saved":false}
{"ts":1376092737284,"patch":[[{"diffs":[[0," = -1;\r\n"],[-1,"            \r\n"],[0,"        "]],"start1":1752,"start2":1752,"length1":30,"length2":16}]],"length":1984,"saved":false}
{"ts":1376092745051,"patch":[[{"diffs":[[0,"\r\n            \r\n"],[1,"            if(end != -1){\r\n                \r\n            }\r\n"],[0,"        }\r\n    }"]],"start1":1885,"start2":1885,"length1":32,"length2":93}]],"length":2045,"saved":false}
{"ts":1376092774001,"patch":[[{"diffs":[[0,"                "],[1,"int length = end - i;\r\n                if(max < (end-i)){\r\n                    \r\n                }"],[0,"\r\n            }\r"]],"start1":1929,"start2":1929,"length1":32,"length2":130}]],"length":2143,"saved":false}
{"ts":1376092794128,"patch":[[{"diffs":[[0,"    "],[-1,"if("],[0,"max "],[-1,"< (end-i)){\r\n                    \r\n                }"],[1,"= length > max ? length : max;"],[0,"\r\n  "]],"start1":1980,"start2":1980,"length1":67,"length2":42}]],"length":2118,"saved":false}
{"ts":1376092797809,"patch":[[{"diffs":[[0,"\n        }\r\n"],[1,"        \r\n        return max;\r\n"],[0,"    }\r\n};\r\n\r"]],"start1":2034,"start2":2034,"length1":24,"length2":55}]],"length":2149,"saved":false}
{"ts":1376092804934,"patch":[[{"diffs":[[0," if(s[j]"],[1,"+"],[0," < 0) br"]],"start1":1810,"start2":1810,"length1":16,"length2":17}]],"length":2150,"saved":false}
{"ts":1376092810274,"patch":[[{"diffs":[[0,"if(s[j]+"],[1,"s[i]"],[0," < 0) br"]],"start1":1811,"start2":1811,"length1":16,"length2":20}]],"length":2154,"saved":false}
{"ts":1376092818101,"patch":[[{"diffs":[[0,"(int j=i"],[1,"+1"],[0,";j<n;j++"]],"start1":1775,"start2":1775,"length1":16,"length2":18}]],"length":2156,"saved":false}
{"ts":1376092838626,"patch":[[{"diffs":[[0," = -1;\r\n"],[1,"            if(s[i] < 0) continue;\r\n            \r\n"],[0,"        "]],"start1":1752,"start2":1752,"length1":16,"length2":66}]],"length":2206,"saved":false}
{"ts":1376092901908,"patch":[[{"diffs":[[0,"    "],[-1,"if(s[i] < 0) continue"],[1,"\r\n            int start = 0"],[0,";\r\n "]],"start1":1768,"start2":1768,"length1":29,"length2":35}]],"length":2212,"saved":false}
{"ts":1376092908355,"patch":[[{"diffs":[[0,"\r\n            \r\n"],[1,"            \r\n"],[0,"            for("]],"start1":1800,"start2":1800,"length1":32,"length2":46}]],"length":2226,"saved":false}
{"ts":1376092916722,"patch":[[{"diffs":[[0,"0;\r\n            "],[1,"start = s[i]"],[0,"\r\n            \r\n"]],"start1":1798,"start2":1798,"length1":32,"length2":44}]],"length":2238,"saved":false}
{"ts":1376092933290,"patch":[[{"diffs":[[0,"t = s[i]"],[1," - s[i-1];"],[0,"\r\n      "]],"start1":1818,"start2":1818,"length1":16,"length2":26}]],"length":2248,"saved":false}
{"ts":1376092941199,"patch":[[{"diffs":[[0,"ze()"],[-1,"==0"],[1,"<2"],[0,") re"]],"start1":1334,"start2":1334,"length1":11,"length2":10}]],"length":2247,"saved":false}
{"ts":1376092943276,"patch":[[{"diffs":[[0,"urn 0;\r\n"],[-1,"        \r\n"],[0,"        "]],"start1":1345,"start2":1345,"length1":26,"length2":16}]],"length":2237,"saved":false}
{"ts":1376092963674,"patch":[[{"diffs":[[0,"int start = 0;\r\n"],[1,"            if(i == 0){\r\n                start = s[i];\r\n            }\r\n"],[0,"            star"]],"start1":1775,"start2":1775,"length1":32,"length2":103}]],"length":2308,"saved":false}
{"ts":1376092970524,"patch":[[{"diffs":[[0,";\r\n            }"],[-1,"\r\n"],[1,"else{\r\n    "],[0,"            star"]],"start1":1844,"start2":1844,"length1":34,"length2":43},{"diffs":[[0," - s[i-1];\r\n"],[1,"            }\r\n"],[0,"            "]],"start1":1895,"start2":1895,"length1":24,"length2":39}]],"length":2332,"saved":false}
{"ts":1376092992662,"patch":[[{"diffs":[[0,"rt ="],[-1," s[i] -"],[0," s[i"]],"start1":1886,"start2":1886,"length1":15,"length2":8}]],"length":2325,"saved":false}
{"ts":1376092995721,"patch":[[{"diffs":[[0,"start = "],[-1,"s[i]"],[1,"0"],[0,";\r\n     "]],"start1":1832,"start2":1832,"length1":20,"length2":17}]],"length":2322,"saved":false}
{"ts":1376093004172,"patch":[[{"diffs":[[0," j=i"],[-1,"+1"],[0,";j<n"]],"start1":1945,"start2":1945,"length1":10,"length2":8}]],"length":2320,"saved":false}
{"ts":1376093011074,"patch":[[{"diffs":[[0,"s[j]"],[-1,"+s[i]"],[1,"-start"],[0," < 0"]],"start1":1980,"start2":1980,"length1":13,"length2":14}]],"length":2321,"saved":false}
{"ts":1376093019806,"patch":[[{"diffs":[[0," if(s[j]"],[1,"-start"],[0," == 0) e"]],"start1":2019,"start2":2019,"length1":16,"length2":22}]],"length":2327,"saved":false}
{"ts":1376093028094,"patch":[[{"diffs":[[0,"    "],[-1,"int end = -1;"],[0,"\r\n  "]],"start1":1730,"start2":1730,"length1":21,"length2":8},{"diffs":[[0,"  \r\n            "],[1,"int end = -1;"],[0,"\r\n            in"]],"start1":1732,"start2":1732,"length1":32,"length2":45}]],"length":2327,"saved":false}
{"contributors":[],"silentsave":false,"ts":1376096871993,"patch":[[{"diffs":[[0,"tring s) {\r\n"],[1,"\t\tif(s.size()<2) return 0;\r\n        int n = s.size();\r\n        \r\n        vector<vector<int>> M;\r\n        M.resize(2*n+1);\r\n\r\n\t\tvector<int> D;\r\n\t\tD.resize(n, 0);\r\n\r\n\t\t//Compute the direction\r\n\t\tfor(int i=0;i<n-1;i++){\r\n\t\t\tif(s[i+1] == '('){\r\n\t\t\t\tD[i] = 1;\r\n\t\t\t}else{\r\n\t\t\t\tD[i] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\tD[n-1] = 0;\r\n\r\n\t\tint count = 0;\r\n        for(int i=0;i<n;i++){\r\n            if(s[i] == ')'){\r\n                count--;\r\n            }else{\r\n                count++;\r\n            }\r\n\t\t\tM[count + n].push_back(i);\r\n        }\r\n\r\n\t\tint maxL = 0;\r\n\t\tfor(int i=0;i<2*n+1;i++){\r\n\t\t\tif(M[i].size() < 2) continue;\r\n\r\n\t\t\tbool good = false;\r\n\t\t\tint begin = -1;\r\n\t\t\tint end = -1;\r\n\r\n\t\t\tfor(int j=0;j<M[i].size();j++){\r\n\t\t\t\tint k = A[i][j];\r\n\t\t\t\tif(!good){\r\n\t\t\t\t\tif(D[k] > 0) good = true;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn maxL;\r\n\t}\r\n\r\n    int longestValidParentheses_On2(string s) {//On2\r\n"],[0,"        // S"]],"start1":1211,"start2":1211,"length1":24,"length2":913},{"diffs":[[0,"0;\r\n"],[-1,"        for(int i=0;i<n;i++){\r\n            "],[1,"\t\tint i=0;\r\n        while(i<n){\r\n\t\t\twhile(i<n && s[i] == ')') {\r\n\t\t\t\ti++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n"],[0,"\r\n  "]],"start1":2576,"start2":2576,"length1":51,"length2":104},{"diffs":[[0,"start = "],[-1,"s"],[1,"M"],[0,"[i-1];\r\n"]],"start1":2822,"start2":2822,"length1":17,"length2":17},{"diffs":[[0,"             if("],[-1,"s"],[1,"M"],[0,"[j]-start < 0) b"]],"start1":2906,"start2":2906,"length1":33,"length2":33},{"diffs":[[0,"     if("],[-1,"s"],[1,"M"],[0,"[j]-star"]],"start1":2957,"start2":2957,"length1":17,"length2":17},{"diffs":[[0," end - i"],[1," + 1"],[0,";\r\n     "]],"start1":3077,"start2":3077,"length1":16,"length2":20},{"diffs":[[0,"gth : max;\r\n"],[1,"\t\t\t\ti = end+1;\r\n"],[0,"            "]],"start1":3132,"start2":3132,"length1":24,"length2":40},{"diffs":[[0,"\r\n            }\r"],[1,"\n\r\n\t\t\ti++;\r"],[0,"\n        }\r\n    "]],"start1":3158,"start2":3158,"length1":32,"length2":43},{"diffs":[[0,"ion s;\r\n"],[-1,""],[0,"    \r\n"],[1,"\tcout << s.longestValidParentheses(\")(\") << endl;\r\n\tcout << s.longestValidParentheses(\")())))\") << endl;\r\n\r\n"],[0,"\tsystem("]],"start1":3264,"start2":3264,"length1":22,"length2":130}]],"length":3408,"saved":false}
