{"ts":1374685516108,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*Largest Rectangle in HistogramApr 23 '124213 / 13587\r\nGiven n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.\r\n\r\n\r\n\r\nAbove is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].\r\n\r\n\r\n\r\nThe largest rectangle is shown in the shaded area, which has area = 10 unit.\r\n\r\nFor example,\r\nGiven height = [2,1,5,6,2,3],\r\nreturn 10.\r\n\r\nMaximal Rectangle Apr 24 '122415 / 8797\r\nGiven a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing all ones and return its area.\r\n\r\n\r\nAuthor: Wencan Luo\r\nLanguage: C++\r\nDate: 07/17/2013\r\n*/\r\n\r\n#include<iostream>\r\nusing namespace std;\r\n\r\n#include<vector>\r\n#include<string>\r\n#include<algorithm>\r\n\r\n#include<map>\r\n//#include<unordered_set>\r\n\r\n#include<queue>\r\n#include<set>\r\n#include<stack>\r\n\r\n// Definition for binary tree\r\n struct TreeNode {\r\n     int val;\r\n     TreeNode *left;\r\n     TreeNode *right;\r\n\t TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n};\r\n \r\nclass Solution {\r\npublic:\r\n\tint maximalRectangle(vector<vector<char> > &matrix) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n\t\tint n = matrix.size();\r\n\t\tif(n<=0) return 0;\r\n\t\tint m = matrix[0].size();\r\n\t\tif(m<=0) return 0;\r\n\r\n        vector<vector<int> > A;\r\n\t\tA.resize(n);\r\n\r\n\t\tfor(int i=0;i<n;i++){\r\n\t\t\tA[i].resize(m,0);\r\n\t\t}\r\n\r\n\t\t//initialize the histogram\r\n\t\tfor(int j=0;j<m;j++){\r\n\t\t\tint count = 0;\r\n\t\t\tfor(int i=0;i<n;i++){\r\n\t\t\t\tif( '1' == matrix[i][j] ){\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tcount = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tA[i][j] = count;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tint maxArea = -1;\r\n\t\tfor(int i=0;i<n;i++){\r\n\t\t\tint area = largestRectangleArea(A[i]);\r\n\t\t\tif(maxArea < area){\r\n\t\t\t\tmaxArea = area;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn maxArea;\r\n    }\r\n\r\n    int largestRectangleArea(vector<int> &height) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        int n = height.size();\r\n\t\tif(n==0) return 0;\r\n\r\n\t\tint maxArea = -1;\r\n\t\t\r\n\t\tstack<int> S;\r\n\r\n\t\tS.push(0);\r\n\r\n\t\tfor(int i=1;i<height.size();i++){\r\n\t\t\tif(height[i] >= height[i-1]){//in\r\n\t\t\t\tS.push(i);\r\n\t\t\t}else{//out\r\n\t\t\t\tint k = -1;\r\n\t\t\t\twhile(!S.empty() && height[S.top()] > height[i]){\r\n\t\t\t\t\tk = S.top();\r\n\t\t\t\t\tS.pop();\r\n\r\n\t\t\t\t\tint area = (i-k)*height[k];\r\n\t\t\t\t\tif(maxArea < area){\r\n\t\t\t\t\t\tmaxArea = area;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif( k == -1) k = i;\r\n\t\t\t\theight[k] = height[i];\r\n\t\t\t\tS.push(k);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twhile(!S.empty()){\r\n\t\t\tint k = S.top();\r\n\t\t\tS.pop();\r\n\r\n\t\t\tint area = (n-k)*height[k];\r\n\t\t\tif(maxArea < area){\r\n\t\t\t\tmaxArea = area;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn maxArea;\r\n    }\r\n};\r\n\r\nint main(){\r\n\tSolution s;\r\n\t\r\n\t//int a[] = {2,1,5,6,2,3};\r\n\tint a[] = {2,1,2};\r\n\r\n\tvector<int> v(a, a + sizeof(a)/sizeof(a[0]));\r\n\r\n\tcout << s.largestRectangleArea(v);\r\n\r\n\tsystem(\"pause\");\r\n    return 0;\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":2872}]],"length":2872}
