{"ts":1375461849535,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*Merge IntervalsMar 27 '124174 / 14847\r\nGiven a collection of intervals, merge all overlapping intervals.\r\n\r\nFor example,\r\nGiven [1,3],[2,6],[8,10],[15,18],\r\nreturn [1,6],[8,10],[15,18].\r\n\r\nAuthor: Wencan Luo\r\nLanguage: C++\r\nDate: 08/01/2013\r\n*/\r\n\r\n#include<iostream>\r\nusing namespace std;\r\n#include<climits>\r\n\r\n#include<vector>\r\n#include<string>\r\n#include<algorithm>\r\n\r\n#include<map>\r\n//#include<unordered_set>\r\n\r\n#include<queue>\r\n#include<set>\r\n\r\n// Definition for binary tree\r\n struct TreeNode {\r\n     int val;\r\n     TreeNode *left;\r\n     TreeNode *right;\r\n TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n};\r\n\r\n//Definition for singly-linked list.\r\nstruct ListNode {\r\n    int val;\r\n    ListNode *next;\r\n    ListNode(int x) : val(x), next(NULL) {}\r\n};\r\n\r\n// Definition for an interval.\r\nstruct Interval {\r\n    int start;\r\n    int end;\r\n    Interval() : start(0), end(0) {}\r\n    Interval(int s, int e) : start(s), end(e) {}\r\n};\r\n\r\nclass Solution {\r\npublic:\r\n\r\n    struct IntervalCompare{\r\n        bool operator () (const Interval a, const Interval b){\r\n            return a.start < b.start;\r\n        }\r\n    }intervalCompare;\r\n    \r\n    vector<Interval> merge(vector<Interval> &intervals) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        \r\n        vector<Interval> A;\r\n        if(intervals.size() == 0) return A;\r\n        \r\n        //sort Interval by start\r\n        sort(intervals.begin(), intervals.end(), intervalCompare);\r\n        \r\n        int k=0;\r\n        while(k<intervals.size()){\r\n            int start = intervals[k].start;\r\n            int end = intervals[k].end;\r\n            \r\n            while(k+1 < intervals.size() && end >= intervals[k+1].start){\r\n                end = max(end, intervals[k+1].end);\r\n                k++;\r\n            }\r\n            A.push_back(Interval(start, end));\r\n            k++;\r\n        }\r\n        return A;\r\n    }\r\n};\r\n\r\nvoid main(){\r\n\tSolution s;\r\n\r\n\tsystem(\"pause\");\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":1982}]],"length":1982}
