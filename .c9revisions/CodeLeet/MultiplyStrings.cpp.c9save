{"ts":1375660138410,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*Wildcard MatchingMar 16 '126416 / 25360\r\nImplement wildcard pattern matching with support for '?' and '*'.\r\n\r\n'?' Matches any single character.\r\n'*' Matches any sequence of characters (including the empty sequence).\r\n\r\nThe matching should cover the entire input string (not partial).\r\n\r\nThe function prototype should be:\r\nbool isMatch(const char *s, const char *p)\r\n\r\nSome examples:\r\nisMatch(\"aa\",\"a\") ? false\r\nisMatch(\"aa\",\"aa\") ? true\r\nisMatch(\"aaa\",\"aa\") ? false\r\nisMatch(\"aa\", \"*\") ? true\r\nisMatch(\"aa\", \"a*\") ? true\r\nisMatch(\"ab\", \"?*\") ? true\r\nisMatch(\"aab\", \"c*a*b\") ? false\r\n\r\nAuthor: Wencan Luo\r\nLanguage: C++\r\nDate: 08/04/2013\r\n*/\r\n\r\n#include<iostream>\r\nusing namespace std;\r\n#include<climits>\r\n\r\n#include<vector>\r\n#include<string>\r\n#include<algorithm>\r\n\r\n#include<map>\r\n//#include<unordered_set>\r\n\r\n#include<queue>\r\n#include<set>\r\n\r\n// Definition for binary tree\r\n struct TreeNode {\r\n     int val;\r\n     TreeNode *left;\r\n     TreeNode *right;\r\n TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n};\r\n\r\n//Definition for singly-linked list.\r\nstruct ListNode {\r\n    int val;\r\n    ListNode *next;\r\n    ListNode(int x) : val(x), next(NULL) {}\r\n};\r\n\r\n// Definition for an interval.\r\nstruct Interval {\r\n    int start;\r\n    int end;\r\n    Interval() : start(0), end(0) {}\r\n    Interval(int s, int e) : start(s), end(e) {}\r\n};\r\n\r\nclass Solution {\r\npublic:\r\n    bool canJump(int A[], int n) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        if(n==0) return true;\r\n        \r\n        int maxK = 0;\r\n        for(int i=0;i<n && i <= maxK;i++){\r\n            if(maxK < A[i] + i){\r\n                maxK = A[i] + i;\r\n            }\r\n        }\r\n        \r\n        if(maxK >= n-1) return true;       \r\n        return false;\r\n    }\r\n    \r\n    int jump(int A[], int n) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        if(n==0) return 0;\r\n        \r\n        vector<int> S;\r\n        S.resize(n, 0);\r\n        \r\n        int maxK = 0;\r\n        for(int i=0;i<n && i <= maxK;i++){\r\n            if(maxK < A[i] + i){\r\n                for(int j=maxK+1; j < n && j <= A[i] + i; j++){\r\n                    S[j] = S[i] + 1;\r\n                }\r\n                maxK = A[i] + i;\r\n            }\r\n        }\r\n        \r\n        return S[n-1];\r\n    }\r\n};\r\n\r\nvoid main(){\r\n\tSolution s;\r\n\r\n    int A[] = {2,3,1,1,4};\r\n    cout << s.jump(A, sizeof(A)/sizeof(A[0]));\r\n    \r\n\tsystem(\"pause\");\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":2477}]],"length":2477}
{"contributors":[],"silentsave":false,"ts":1375726949285,"patch":[[{"diffs":[[0,"    "],[-1,"bool canJump(int A[], int n"],[1,"\r\n    bool isMatch(const char *s, const char *p"],[0,") {\r"]],"start1":1363,"start2":1363,"length1":35,"length2":55},{"diffs":[[0,"   i"],[-1,"f(n==0) return true;\r\n        \r\n        int maxK = 0;\r\n        for(int i=0;i<n && i <= maxK;i++){\r\n            if(maxK < A[i] + i){\r\n                maxK = A[i] + i;\r\n            }\r\n        }\r\n        \r\n        if(maxK >= n-1"],[1,"nt m = strlen(s);\r\n        int n = strlen(p);\r\n        if(m==0 && n==0"],[0,") re"]],"start1":1520,"start2":1520,"length1":233,"length2":78},{"diffs":[[0,"rn true;"],[-1,"       "],[0,"\r\n      "]],"start1":1600,"start2":1600,"length1":23,"length2":16},{"diffs":[[0,"n true;\r\n       "],[1," if(m==0)"],[0," return false;\r\n"]],"start1":1601,"start2":1601,"length1":32,"length2":41},{"diffs":[[0,"e;\r\n"],[-1,"    }\r\n    \r\n    int jump(int A[], int n) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n"],[0,"    "]],"start1":1638,"start2":1638,"length1":149,"length2":8},{"diffs":[[0," return "],[-1,"0"],[1,"false"],[0,";\r\n     "]],"start1":1658,"start2":1658,"length1":17,"length2":21},{"diffs":[[0,"    "],[-1,"vector<int> S;\r\n        S.resize(n, 0);\r\n        \r\n        int maxK = 0;\r\n        for(int i=0;i<n && i <= maxK;i++){\r\n            if(maxK < A[i] + i){\r\n                for(int j=maxK+1; j < n && j <= A[i] + i; j++){\r\n                    S[j] = S[i] + 1;\r\n                }\r\n                maxK = A[i] + i;\r\n            }\r\n        }\r\n        \r\n        return S[n-1]"],[1,"\r\n        return isMatchRec(s, m, p, n)"],[0,";\r\n "]],"start1":1688,"start2":1688,"length1":373,"length2":47}]],"length":1881,"saved":false}
{"ts":1375727335215,"patch":[[{"diffs":[[0,"ublic:\r\n"],[1,"    bool isMatchRec(const char *s, int m, const char *p, int n){\r\n        if(m==0 && n==0) return true;\r\n        if(m==0){\r\n            for(int i=0;i<n;i++){\r\n                if(p[i] != '*') return false;\r\n            }\r\n            return true;  \r\n        } \r\n        if(n==0){\r\n            for(int i=0;i<m;i++){\r\n                if(s[i] != '*') return false;\r\n            }\r\n            return true;  \r\n        } \r\n        \r\n        \r\n        \r\n    }\r\n"],[0,"    \r\n"],[-1,""],[0,"    bool"]],"start1":1355,"start2":1355,"length1":22,"length2":476},{"diffs":[[0,"strlen(s);\r\n"],[1,""],[0,"        int "]],"start1":1985,"start2":1985,"length1":24,"length2":24},{"diffs":[[0,");\r\n"],[-1,"        if(m==0 && n==0) return true;\r\n        if(m==0) return false;\r\n        if(n==0) return false;\r\n        \r\n"],[0,"    "]],"start1":2021,"start2":2021,"length1":121,"length2":8}]],"length":2222,"saved":false}
{"ts":1375727506904,"patch":[[{"diffs":[[0,"  } \r\n        \r\n"],[1,"        if(s[m-1] == '*'){\r\n            \r\n        }else if(s[m-1] == '?'){\r\n            \r\n        }else{\r\n            \r\n        }\r\n"],[0,"        \r\n      "]],"start1":1774,"start2":1774,"length1":32,"length2":163}]],"length":2353,"saved":false}
{"ts":1375727756443,"patch":[[{"diffs":[[0,"  }else{"],[1,"//letter"],[0,"\r\n      "]],"start1":1886,"start2":1886,"length1":16,"length2":24},{"diffs":[[0,"er\r\n            "],[1,"if(p[n-1] == '*'){\r\n            \r\n            }else if(p[n-1] == '?'){\r\n                \r\n            }else{\r\n                \r\n            }"],[0,"\r\n        }\r\n   "]],"start1":1900,"start2":1900,"length1":32,"length2":173}]],"length":2502,"saved":false}
{"ts":1375727760761,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n        }else if(s[m-1] == '?'){\r\n            "],[1,"if(p[n-1] == '*'){\r\n            \r\n            }else if(p[n-1] == '?'){\r\n                \r\n            }else{\r\n                \r\n            }\r\n        }else if(s[m-1] == '?'){\r\n            if(p[n-1] == '*'){\r\n            \r\n            }else if(p[n-1] == '?'){\r\n                \r\n            }else{\r\n                \r\n            }"],[0,"\r\n  "]],"start1":1826,"start2":1826,"length1":56,"length2":338}]],"length":2784,"saved":false}
{"ts":1375727765994,"patch":[[{"diffs":[[0," }\r\n"],[-1,"        \r\n        \r\n"],[0,"    "]],"start1":2348,"start2":2348,"length1":28,"length2":8}]],"length":2764,"saved":false}
{"ts":1375727812901,"patch":[[{"diffs":[[0,"                "],[1,"return isMatchRec(s, m-1, p, n-1);"],[0,"\r\n            }\r"]],"start1":2308,"start2":2308,"length1":32,"length2":66}]],"length":2798,"saved":false}
{"ts":1375727849270,"patch":[[{"diffs":[[0,"){\r\n            "],[1,"     return isMatchRec(s, m-1, p, n-1) || isMatchRec(s, m-1, p, n-1);"],[0,"\r\n            }e"]],"start1":2214,"start2":2214,"length1":32,"length2":101}]],"length":2867,"saved":false}
{"ts":1375727873874,"patch":[[{"diffs":[[0,"Rec(s, m-1, p, n"],[-1,"-1"],[0,");\r\n            "]],"start1":2279,"start2":2279,"length1":34,"length2":32}]],"length":2865,"saved":false}
{"ts":1375728477590,"patch":[[{"diffs":[[0,"                "],[1,"return isMatchRec(s, m-1, p, n-1);"],[0,"\r\n            }e"]],"start1":2337,"start2":2337,"length1":32,"length2":66}]],"length":2899,"saved":false}
{"ts":1375728817932,"patch":[[{"diffs":[[0,"                "],[1,"return isMatchRec(s, m-1, p, n-1);"],[0,"\r\n            }e"]],"start1":2091,"start2":2091,"length1":32,"length2":66},{"diffs":[[0,"                "],[1,"return isMatchRec(s, m-1, p, n-1);"],[0,"\r\n            }\r"]],"start1":2163,"start2":2163,"length1":32,"length2":66}]],"length":2967,"saved":false}
{"ts":1375728820258,"patch":[[{"diffs":[[0,"){\r\n            "],[1,"    "],[0,"\r\n            }e"]],"start1":2035,"start2":2035,"length1":32,"length2":36}]],"length":2971,"saved":false}
{"ts":1375728825645,"patch":[[{"diffs":[[0,"                "],[1,"return isMatchRec(s, m-1, p, n-1) || isMatchRec(s, m-1, p, n);"],[0,"\r\n            }e"]],"start1":2039,"start2":2039,"length1":32,"length2":94}]],"length":3033,"saved":false}
{"ts":1375728830973,"patch":[[{"diffs":[[0,"){\r\n            "],[1,"    "],[0,"\r\n            }e"]],"start1":1846,"start2":1846,"length1":32,"length2":36}]],"length":3037,"saved":false}
{"ts":1375728838143,"patch":[[{"diffs":[[0,"                "],[1,"return isMatchRec(s, m-1, p, n-1) || isMatchRec(s, m-1, p, n);"],[0,"\r\n            }\r"]],"start1":1944,"start2":1944,"length1":32,"length2":94}]],"length":3099,"saved":false}
{"ts":1375728855673,"patch":[[{"diffs":[[0,"atchRec(s, m"],[-1,"-1"],[0,", p, n"],[1,"-1"],[0,");\r\n        "]],"start1":2000,"start2":2000,"length1":32,"length2":32}]],"length":3099,"saved":false}
{"ts":1375736175541,"patch":[[{"diffs":[[0,"                "],[1,"return isMatchRec(s, m-1, p, n-1) || isMatchRec(s, m, p, n-1);"],[0,"\r\n            }e"]],"start1":1906,"start2":1906,"length1":32,"length2":94}]],"length":3161,"saved":false}
{"ts":1375736182704,"patch":[[{"diffs":[[0,"                "],[1,"return isMatchRec(s, m-1, p, n-1) || isMatchRec(s, m, p, n-1);"],[0,"\r\n            }e"]],"start1":1850,"start2":1850,"length1":32,"length2":94}]],"length":3223,"saved":false}
{"ts":1375736186511,"patch":[[{"diffs":[[0,"ec(s, m, p, n-1)"],[1," || "],[0,";\r\n            }"]],"start1":1911,"start2":1911,"length1":32,"length2":36}]],"length":3227,"saved":false}
{"ts":1375736192605,"patch":[[{"diffs":[[0,"n-1) || "],[1,"isMatchRec(s, m-1, p, n-1)"],[0,";\r\n     "]],"start1":1923,"start2":1923,"length1":16,"length2":42}]],"length":3253,"saved":false}
{"ts":1375736201341,"patch":[[{"diffs":[[0,"Rec(s, m-1, p, n"],[-1,"-1"],[0,");\r\n            "]],"start1":1938,"start2":1938,"length1":34,"length2":32}]],"length":3251,"saved":false}
{"ts":1375736634393,"patch":[[{"diffs":[[0,"ue;  \r\n        }"],[-1," "],[0,"\r\n        if(n=="]],"start1":1605,"start2":1605,"length1":33,"length2":32}]],"length":3250,"saved":false}
{"ts":1375736658550,"patch":[[{"diffs":[[0,"    return true;"],[-1,"  "],[0,"\r\n        } \r\n  "]],"start1":1747,"start2":1747,"length1":34,"length2":32}]],"length":3248,"saved":false}
{"ts":1375740748170,"patch":[[{"diffs":[[0," isMatchRec(s, m"],[-1,""],[0,""],[1,", p, n-1) || isMatchRec(s, m"],[0,"-1, p, n);\r\n    "]],"start1":2306,"start2":2306,"length1":32,"length2":60},{"diffs":[[0,"          }else{"],[-1,""],[0,""],[1,"    \t\t\t"],[0,"\r\n              "]],"start1":2454,"start2":2454,"length1":32,"length2":39},{"diffs":[[0," isMatchRec(s, m"],[-1,""],[0,""],[1,", p, n-1) || isMatchRec(s, m"],[0,"-1, p, n);\r\n    "]],"start1":2655,"start2":2655,"length1":32,"length2":60},{"diffs":[[0,"    }else{\r\n"],[-1,"               "],[1,"\t\t\t\tif(s[m-1] == p[n-1])"],[0," return isMa"]],"start1":2809,"start2":2809,"length1":39,"length2":48},{"diffs":[[0," m-1, p, n-1);\r\n"],[1,"\t\t\t\treturn false;\r\n"],[0,"            }\r\n "]],"start1":2866,"start2":2866,"length1":32,"length2":51},{"diffs":[[0,"   }\r\n    \r\n"],[1,"\tbool isMatch(const char *s, const char *p) {//O(m+n)\r\n\t}\r\n\r\n"],[0,"    bool isM"]],"start1":2928,"start2":2928,"length1":24,"length2":85},{"diffs":[[0,"    bool isMatch"],[1,"_Omn"],[0,"(const char *s, "]],"start1":3001,"start2":3001,"length1":32,"length2":36},{"diffs":[[0,"ar *p) {"],[1,"//O(m*n) Time, O(n) Space"],[0,"\r\n      "]],"start1":3045,"start2":3045,"length1":16,"length2":41},{"diffs":[[0,"  \r\n"],[-1,"        return isMatchRec(s, m, p, n);\r\n    }\r\n};\r\n\r\nvoid main(){\r\n\tSolution s;\r\n\r\n    int A[] = {2,3,1,1,4};\r\n    cout << s.jump(A, sizeof(A)/sizeof(A[0]))"],[1,"\t\tvector<bool>  A;\r\n\t\tvector<bool>  B;\r\n\t\tvector<bool>  C;\r\n\t\tA.resize(n+1, false);\r\n\t\tB.resize(n+1, false);\r\n\t\tC.resize(m+1, false);\r\n\r\n\t\tA[0] = true;\r\n\t\tfor(int j=0;j<n;j++){\r\n\t\t\tif(p[j] != '*') break;\r\n\t\t\tA[j+1] = true;\r\n        }\r\n\r\n        for(int i=0;i<m;i++){\r\n            if(s[i] != '*') break;\r\n\t\t\tC[i+1] = true;\r\n        }\r\n   \r\n\t\tfor(int i=0;i<m;i++){\r\n\t\t\tB[0] = C[i];\r\n\r\n\t\t\tfor(int j=0;j<n;j++){\r\n\t\t\t\tB[j+1] = false;\r\n\t\t\t\tif(s[i] == '*'){\r\n\t\t\t\t\tif(p[j] == '*'){\r\n\t\t\t\t\t\tB[j+1] = A[j] || B[j] || A[j+1];\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tB[j+1] = A[j] || B[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(p[j] == '*'){\r\n\t\t\t\t\t\tB[j+1] = A[j] || B[j] || A[j+1];\r\n\t\t\t\t\t}else if(s[i] == '?' || p[j] == '?' || s[i] == p[j]){\r\n\t\t\t\t\t\tB[j+1] = A[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tA = B;\r\n\t\t}\r\n        \r\n        return A[n];\r\n    }\r\n\r\n\tbool isMatch_O2Space(const char *s, const char *p) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        int m = strlen(s);\r\n        int n = strlen(p);\r\n        \r\n\t\tvector< vector<bool> > A;\r\n\t\tA.resize(m+1);\r\n\r\n\t\tfor(int i=0;i<A.size();i++){\r\n\t\t\tA[i].resize(n+1,false);\r\n\t\t}\r\n\r\n\t\tA[0][0] = true;\r\n\t\tfor(int i=0;i<m;i++){\r\n\t\t\tif(s[i] != '*') break;\r\n\t\t\tA[i+1][0] = true;\r\n        }\r\n\r\n        for(int j=0;j<n;j++){\r\n            if(p[j] != '*') break;\r\n\t\t\tA[0][j+1] = true;\r\n        }\r\n   \r\n\t\tfor(int i=0;i<m;i++){\r\n\t\t\tfor(int j=0;j<n;j++){\r\n\t\t\t\tif(s[i] == '*'){\r\n\t\t\t\t\tif(p[j] == '*'){\r\n\t\t\t\t\t\tA[i+1][j+1] = A[i][j] || A[i+1][j] || A[i][j+1];\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tA[i+1][j+1] = A[i][j] || A[i+1][j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(p[j] == '*'){\r\n\t\t\t\t\t\tA[i+1][j+1] = A[i][j] || A[i+1][j] || A[i][j+1];\r\n\t\t\t\t\t}else if(s[i] == '?' || p[j] == '?' || s[i] == p[j]){\r\n\t\t\t\t\t\tA[i+1][j+1] = A[i][j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n        \r\n        return A[m][n];\r\n    }\r\n};\r\n\r\nvoid main(){\r\n\tSolution s;\r\n\r\n\tcout << s.isMatch(\"\",\"*\") << endl;\r\n\tcout << s.isMatch(\"a\",\"b\") << endl;\r\n\tcout << s.isMatch(\"a*\",\"*a\") << endl;\r\n\tcout << s.isMatch(\"***\",\"*\") << endl"],[0,";\r\n "]],"start1":3238,"start2":3238,"length1":164,"length2":2006}]],"length":5271,"saved":false}
{"contributors":[],"silentsave":false,"ts":1375769358861,"patch":[[{"diffs":[[0,"\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n"],[1,"                if(!B[j+1]) break;\r\n"],[0,"\t\t\t}\r\n\t\t\tA = B;\r"]],"start1":3964,"start2":3964,"length1":32,"length2":68}]],"length":5307,"saved":false}
{"ts":1375771124892,"patch":[[{"diffs":[[0,"\t\t\t\t\t}\r\n"],[-1,"\t\t\t\t}\r\n"],[0,"        "]],"start1":3965,"start2":3965,"length1":23,"length2":16},{"diffs":[[0,"    "],[-1,"if(!B[j+1]) break;"],[1,"    \r\n\t\t\t\t}"],[0,"\r\n\t\t"]],"start1":3985,"start2":3985,"length1":26,"length2":19}]],"length":5293,"saved":false}
{"ts":1375772875786,"patch":[[{"diffs":[[0,"O(m+n)\r\n"],[1,"        int m = strlen(s);\r\n        int n = strlen(p);\r\n        \r\n        bool sHasStar = false;\r\n        int sCount = 0;\r\n        for(int i=0;i<m;i++){\r\n            if(s[i] == '*') {\r\n                sHasStar = true;\r\n            }else{\r\n                sCount++;\r\n            }\r\n        }\r\n        \r\n        bool pHasStar = false;\r\n        int pCount = 0;\r\n        for(int i=0;i<n;i++){\r\n            if(p[i] == '*') {\r\n                pHasStar = true;\r\n            }else{\r\n                pCount++;\r\n            }\r\n        }\r\n        \r\n        if(sHasStar && !pHasStar){\r\n            if(sCount > pCount) return false;\r\n        }\r\n        \r\n        if(!sHasStar && pHasStar){\r\n            if(sCount < pCount) return false;\r\n        }\r\n        \r\n        vector<bool>  A;\r\n\t\tvector<bool>  B;\r\n\t\tvector<bool>  C;\r\n\t\tA.resize(n+1, false);\r\n\t\tB.resize(n+1, false);\r\n\t\tC.resize(m+1, false);\r\n\r\n\t\tA[0] = true;\r\n\t\tfor(int j=0;j<n;j++){\r\n\t\t\tif(p[j] != '*') break;\r\n\t\t\tA[j+1] = true;\r\n        }\r\n\r\n        for(int i=0;i<m;i++){\r\n            if(s[i] != '*') break;\r\n\t\t\tC[i+1] = true;\r\n        }\r\n   \r\n\t\tfor(int i=0;i<m;i++){\r\n\t\t\tB[0] = C[i];\r\n\r\n\t\t\tfor(int j=0;j<n;j++){\r\n\t\t\t\tB[j+1] = false;\r\n\t\t\t\t\r\n\t\t\t\tif(p[j] == '*'){\r\n\t\t\t\t\tB[j+1] = A[j] || B[j] || A[j+1];\r\n\t\t\t\t}else if(p[j] == '?' || s[i] == p[j]){\r\n\t\t\t\t\tB[j+1] = A[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tA = B;\r\n\t\t}\r\n        \r\n        return A[n];\r\n"],[0,"\t}\r\n\r\n  "]],"start1":2987,"start2":2987,"length1":16,"length2":1391}]],"length":6668,"saved":false}
{"contributors":[],"silentsave":false,"ts":1375818397807,"patch":[[{"diffs":[[0,"/*"],[-1,"Wildcard Match"],[1,"Multiply Str"],[0,"ing"],[1,"s"],[0,"Mar 1"],[-1,"6"],[1,"2"],[0," '12"],[-1,"6416 / 25360\r\nImplement wildcard pattern matching with support for '?' and '*'.\r\n\r\n'?' Matches any single character.\r\n'*' Matches any sequence of characters (including the empty sequence).\r\n\r\nThe matching should cover the entire input string (not partial).\r\n\r\nThe function prototype should be:\r\nbool isMatch(const char *s, const char *p)\r\n\r\nSome examples:\r\nisMatch(\"aa\",\"a\") ? false\r\nisMatch(\"aa\",\"aa\") ? true\r\nisMatch(\"aaa\",\"aa\") ? false\r\nisMatch(\"aa\", \"*\") ? true\r\nisMatch(\"aa\", \"a*\") ? true\r\nisMatch(\"ab\", \"?*\") ? true\r\nisMatch(\"aab\", \"c*a*b\") ? false"],[1,"3693 / 14018\r\nGiven two numbers represented as strings, return multiplication of the numbers as a string.\r\nNote: The numbers can be arbitrarily large and are non-negative."],[0,"\r\n\r\n"]],"start1":0,"start2":0,"length1":587,"length2":203}]],"length":6284,"saved":false}
{"ts":1375818414944,"patch":[[{"diffs":[[0,"    "],[-1,"bool isMatchRec(const char *s, int m, const char *p, int n){\r\n        if(m==0 && n==0) return true;\r\n        if(m==0){\r\n            for(int i=0;i<n;i++){\r\n                if(p[i] != '*') return false;\r\n            }\r\n            return true;  \r\n        }\r\n        if(n==0){\r\n            for(int i=0;i<m;i++){\r\n                if(s[i] != '*') return false;\r\n            }\r\n            return true;\r\n        } \r\n        \r\n        if(s[m-1] == '*'){\r\n            if(p[n-1] == '*'){\r\n                return isMatchRec(s, m-1, p, n-1) || isMatchRec(s, m, p, n-1) || isMatchRec(s, m-1, p, n);\r\n            }else if(p[n-1] == '?'){\r\n                return isMatchRec(s, m-1, p, n-1) || isMatchRec(s, m, p, n-1);\r\n            }else{\r\n                return isMatchRec(s, m-1, p, n-1) || isMatchRec(s, m, p, n-1);\r\n            }\r\n        }else if(s[m-1] == '?'){\r\n            if(p[n-1] == '*'){\r\n                return isMatchRec(s, m-1, p, n-1) || isMatchRec(s, m, p, n-1) || isMatchRec(s, m-1, p, n);\r\n            }else if(p[n-1] == '?'){\r\n                return isMatchRec(s, m-1, p, n-1);\r\n            }else{    \t\t\t\r\n                return isMatchRec(s, m-1, p, n-1);\r\n            }\r\n        }else{//letter\r\n            if(p[n-1] == '*'){\r\n                 return isMatchRec(s, m-1, p, n-1) || isMatchRec(s, m, p, n-1) || isMatchRec(s, m-1, p, n);\r\n            }else if(p[n-1] == '?'){\r\n                return isMatchRec(s, m-1, p, n-1);\r\n            }else{\r\n\t\t\t\tif(s[m-1] == p[n-1]) return isMatchRec(s, m-1, p, n-1);\r\n\t\t\t\treturn false;\r\n            }\r\n        }\r\n    }\r\n    \r\n\tbool isMatch(const char *s, const char *p) {//O(m+n)\r\n        int m = strlen(s);\r\n        int n = strlen(p);\r\n        \r\n        bool sHasStar = false;\r\n        int sCount = 0;\r\n        for(int i=0;i<m;i++){\r\n            if(s[i] == '*') {\r\n                sHasStar = true;\r\n            }else{\r\n                sCount++;\r\n            }\r\n        }\r\n        \r\n        bool pHasStar = false;\r\n        int pCount = 0;\r\n        for(int i=0;i<n;i++){\r\n            if(p[i] == '*') {\r\n                pHasStar = true;\r\n            }else{\r\n                pCount++;\r\n            }\r\n        }\r\n        \r\n        if(sHasStar && !pHasStar){\r\n            if(sCount > pCount) return false;\r\n        }\r\n        \r\n        if(!sHasStar && pHasStar){\r\n            if(sCount < pCount) return false;\r\n        }\r\n        \r\n        vector<bool>  A;\r\n\t\tvector<bool>  B;\r\n\t\tvector<bool>  C;\r\n\t\tA.resize(n+1, false);\r\n\t\tB.resize(n+1, false);\r\n\t\tC.resize(m+1, false);\r\n\r\n\t\tA[0] = true;\r\n\t\tfor(int j=0;j<n;j++){\r\n\t\t\tif(p[j] != '*') break;\r\n\t\t\tA[j+1] = true;\r\n        }\r\n\r\n        for(int i=0;i<m;i++){\r\n            if(s[i] != '*') break;\r\n\t\t\tC[i+1] = true;\r\n        }\r\n   \r\n\t\tfor(int i=0;i<m;i++){\r\n\t\t\tB[0] = C[i];\r\n\r\n\t\t\tfor(int j=0;j<n;j++){\r\n\t\t\t\tB[j+1] = false;\r\n\t\t\t\t\r\n\t\t\t\tif(p[j] == '*'){\r\n\t\t\t\t\tB[j+1] = A[j] || B[j] || A[j+1];\r\n\t\t\t\t}else if(p[j] == '?' || s[i] == p[j]){\r\n\t\t\t\t\tB[j+1] = A[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tA = B;\r\n\t\t}\r\n        \r\n        return A[n];\r\n\t}\r\n\r\n    bool isMatch_Omn(const char *s, const char *p) {//O(m*n) Time, O(n) Space\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        int m = strlen(s);\r\n        int n = strlen(p);\r\n        \r\n\t\tvector<bool>  A;\r\n\t\tvector<bool>  B;\r\n\t\tvector<bool>  C;\r\n\t\tA.resize(n+1, false);\r\n\t\tB.resize(n+1, false);\r\n\t\tC.resize(m+1, false);\r\n\r\n\t\tA[0] = true;\r\n\t\tfor(int j=0;j<n;j++){\r\n\t\t\tif(p[j] != '*') break;\r\n\t\t\tA[j+1] = true;\r\n        }\r\n\r\n        for(int i=0;i<m;i++){\r\n            if(s[i] != '*') break;\r\n\t\t\tC[i+1] = true;\r\n        }\r\n   \r\n\t\tfor(int i=0;i<m;i++){\r\n\t\t\tB[0] = C[i];\r\n\r\n\t\t\tfor(int j=0;j<n;j++){\r\n\t\t\t\tB[j+1] = false;\r\n\t\t\t\tif(s[i] == '*'){\r\n\t\t\t\t\tif(p[j] == '*'){\r\n\t\t\t\t\t\tB[j+1] = A[j] || B[j] || A[j+1];\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tB[j+1] = A[j] || B[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(p[j] == '*'){\r\n\t\t\t\t\t\tB[j+1] = A[j] || B[j] || A[j+1];\r\n\t\t\t\t\t}else if(s[i] == '?' || p[j] == '?' || s[i] == p[j]){\r\n\t\t\t\t\t\tB[j+1] = A[j];\r\n\t\t\t\t\t}\r\n                    \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tA = B;\r\n\t\t}\r\n        \r\n        return A[n];\r\n    }\r\n\r\n\tbool isMatch_O2Space(const char *s, const char *p) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        int m = strlen(s);\r\n        int n = strlen(p);\r\n        \r\n\t\tvector< vector<bool> > A;\r\n\t\tA.resize(m+1);\r\n\r\n\t\tfor(int i=0;i<A.size();i++){\r\n\t\t\tA[i].resize(n+1,false);\r\n\t\t}\r\n\r\n\t\tA[0][0] = true;\r\n\t\tfor(int i=0;i<m;i++){\r\n\t\t\tif(s[i] != '*') break;\r\n\t\t\tA[i+1][0] = true;\r\n        }\r\n\r\n        for(int j=0;j<n;j++){\r\n            if(p[j] != '*') break;\r\n\t\t\tA[0][j+1] = true;\r\n        }\r\n   \r\n\t\tfor(int i=0;i<m;i++){\r\n\t\t\tfor(int j=0;j<n;j++){\r\n\t\t\t\tif(s[i] == '*'){\r\n\t\t\t\t\tif(p[j] == '*'){\r\n\t\t\t\t\t\tA[i+1][j+1] = A[i][j] || A[i+1][j] || A[i][j+1];\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tA[i+1][j+1] = A[i][j] || A[i+1][j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(p[j] == '*'){\r\n\t\t\t\t\t\tA[i+1][j+1] = A[i][j] || A[i+1][j] || A[i][j+1];\r\n\t\t\t\t\t}else if(s[i] == '?' || p[j] == '?' || s[i] == p[j]){\r\n\t\t\t\t\t\tA[i+1][j+1] = A[i][j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n        \r\n        return A[m][n];"],[1,"string multiply(string num1, string num2) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        "],[0,"\r\n  "]],"start1":979,"start2":979,"length1":5081,"length2":157}]],"length":1360,"saved":false}
{"ts":1375818420045,"patch":[[{"diffs":[[0,"l;\r\n"],[-1,"\tcout << s.isMatch(\"a\",\"b\") << endl;\r\n\tcout << s.isMatch(\"a*\",\"*a\") << endl;\r\n\tcout << s.isMatch(\"***\",\"*\") << endl;\r\n"],[0,"    "]],"start1":1210,"start2":1210,"length1":126,"length2":8}]],"length":1242,"saved":false}
{"ts":1375818423875,"patch":[[{"diffs":[[0,"< s."],[-1,"isMatch"],[1,"multiply"],[0,"(\"\","]],"start1":1184,"start2":1184,"length1":15,"length2":16}]],"length":1243,"saved":false}
{"ts":1375818428361,"patch":[[{"diffs":[[0,"ly(\""],[-1,"\",\"*"],[1,"123\",\"123"],[0,"\") <"]],"start1":1194,"start2":1194,"length1":12,"length2":17}]],"length":1248,"saved":false}
{"ts":1375818470439,"patch":[[{"diffs":[[0,"ublic:\r\n"],[1,"\r\n"],[0,"    stri"]],"start1":971,"start2":971,"length1":16,"length2":18}]],"length":1250,"saved":false}
{"ts":1375818471460,"patch":[[{"diffs":[[0,"ublic:\r\n"],[1,"    "],[0,"\r\n    st"]],"start1":971,"start2":971,"length1":16,"length2":20}]],"length":1254,"saved":false}
{"ts":1375818485964,"patch":[[{"diffs":[[0,"ublic:\r\n"],[1,"    string add(string num1, string num2){\r\n        \r\n    }\r\n"],[0,"    \r\n  "]],"start1":971,"start2":971,"length1":16,"length2":76}]],"length":1314,"saved":false}
{"ts":1375818523944,"patch":[[{"diffs":[[0,"   }\r\n    \r\n"],[1,"    string multiply(char c1, char c2){\r\n        \r\n    }\r\n    \r\n"],[0,"    string m"]],"start1":1033,"start2":1033,"length1":24,"length2":87}]],"length":1377,"saved":false}
{"ts":1375818587389,"patch":[[{"diffs":[[0,"nction\r\n        "],[1,"int m = num1.size();\r\n        int n = num2.size();\r\n        \r\n        for(int i=0;i<n;i++){//for each digit in num2\r\n            //multiply it to num1\r\n            \r\n            \r\n        }"],[0,"\r\n    }\r\n};\r\n\r\nv"]],"start1":1245,"start2":1245,"length1":32,"length2":221}]],"length":1566,"saved":false}
{"ts":1375818752538,"patch":[[{"diffs":[[0," \r\n    }\r\n    \r\n"],[1,"    string multiply(string num1, char c){\r\n        \r\n    }\r\n    \r\n"],[0,"    string multi"]],"start1":1092,"start2":1092,"length1":32,"length2":98}]],"length":1632,"saved":false}
{"ts":1375818802131,"patch":[[{"diffs":[[0,"e();\r\n        \r\n"],[1,"        if(m==0 || n==0) return \"0\";\r\n        \r\n"],[0,"        for(int "]],"start1":1373,"start2":1373,"length1":32,"length2":80},{"diffs":[[0,"m1\r\n            "],[1,"string s = multiply(num1, num2[i]);"],[0,"\r\n            \r\n"]],"start1":1523,"start2":1523,"length1":32,"length2":67}]],"length":1715,"saved":false}
{"ts":1375818897612,"patch":[[{"diffs":[[0,"n \"0\";\r\n"],[1,"        string R = \"0\";\r\n"],[0,"        "]],"start1":1419,"start2":1419,"length1":16,"length2":41}]],"length":1740,"saved":false}
{"ts":1375818913765,"patch":[[{"diffs":[[0,");\r\n            "],[1,"R = add(R, s);"],[0,"\r\n        }\r\n   "]],"start1":1597,"start2":1597,"length1":32,"length2":46}]],"length":1754,"saved":false}
{"ts":1375818936990,"patch":[[{"diffs":[[0,"\"0\";\r\n        \r\n"],[1,"        string z = \"\";\r\n        \r\n"],[0,"        for(int "]],"start1":1446,"start2":1446,"length1":32,"length2":66}]],"length":1788,"saved":false}
{"ts":1375818947112,"patch":[[{"diffs":[[0,"add(R, s);\r\n"],[1,"            z += \"0\";\r\n"],[0,"        }\r\n "]],"start1":1651,"start2":1651,"length1":24,"length2":47}]],"length":1811,"saved":false}
{"ts":1375818963485,"patch":[[{"diffs":[[0,"\n        }\r\n"],[1,"        \r\n        return R;\r\n"],[0,"    }\r\n};\r\n\r"]],"start1":1685,"start2":1685,"length1":24,"length2":53}]],"length":1840,"saved":false}
{"ts":1375819248515,"patch":[[{"diffs":[[0,"r c2){\r\n        "],[1,"stringstream ss;//create a stringstream\r\n        ss << number;//add number to the stream\r\n        return ss.str();//return a string with the contents of the stream"],[0,"\r\n    }\r\n    \r\n "]],"start1":1077,"start2":1077,"length1":32,"length2":195}]],"length":2003,"saved":false}
{"ts":1375819250243,"patch":[[{"diffs":[[0," char c2){\r\n"],[1,"        \r\n"],[0,"        stri"]],"start1":1073,"start2":1073,"length1":24,"length2":34}]],"length":2013,"saved":false}
{"ts":1375819339944,"patch":[[{"diffs":[[0," char c2){\r\n"],[1,"        int number = (c1-'0')*(c2-'0');\r\n"],[0,"        \r\n  "]],"start1":1073,"start2":1073,"length1":24,"length2":65}]],"length":2054,"saved":false}
{"ts":1375819345561,"patch":[[{"diffs":[[0,"*(c2-'0');\r\n"],[-1,"        \r\n"],[0,"        stri"]],"start1":1114,"start2":1114,"length1":34,"length2":24}]],"length":2044,"saved":false}
{"ts":1375819395986,"patch":[[{"diffs":[[0,"ar c){\r\n        "],[1,"if(c=='0') return \"0\";\r\n        \r\n        for(int i=0;num1.size();i++){\r\n            \r\n        }"],[0,"\r\n    }\r\n    \r\n "]],"start1":1347,"start2":1347,"length1":32,"length2":128}]],"length":2140,"saved":false}
{"ts":1375819404273,"patch":[[{"diffs":[[0,"') return \"0\";\r\n"],[1,"        string R = \"0\";\r\n"],[0,"        \r\n      "]],"start1":1371,"start2":1371,"length1":32,"length2":57}]],"length":2165,"saved":false}
{"ts":1375820646160,"patch":[[{"diffs":[[0,"= \"0\";\r\n        "],[1,"string z = \"\";"],[0,"\r\n        for(in"]],"start1":1404,"start2":1404,"length1":32,"length2":46},{"diffs":[[0,"){\r\n            "],[1,"R "],[0,"\r\n        }\r\n   "]],"start1":1471,"start2":1471,"length1":32,"length2":34}]],"length":2181,"saved":false}
{"ts":1375820656741,"patch":[[{"diffs":[[0," num2[i]);\r\n"],[1,"             z += \"0\";\r\n"],[0,"            "]],"start1":1964,"start2":1964,"length1":24,"length2":48},{"diffs":[[0,"\n           "],[-1," z += \"0\";"],[0,"\r\n        }\r"]],"start1":2027,"start2":2027,"length1":34,"length2":24}]],"length":2195,"saved":false}
{"ts":1375820657648,"patch":[[{"diffs":[[0,"        "],[-1," "],[0,"z += \"0\""]],"start1":1980,"start2":1980,"length1":17,"length2":16}]],"length":2194,"saved":false}
{"ts":1375820662793,"patch":[[{"diffs":[[0,"    "],[-1," z += \"0\";"],[0,"\r\n  "]],"start1":1983,"start2":1983,"length1":18,"length2":8},{"diffs":[[0,"s);\r\n           "],[1," z += \"0\";"],[0,"\r\n        }\r\n   "]],"start1":2012,"start2":2012,"length1":32,"length2":42}]],"length":2194,"saved":false}
{"ts":1375820667084,"patch":[[{"diffs":[[0,"]);\r\n           "],[1," s += z;"],[0,"\r\n            R "]],"start1":1971,"start2":1971,"length1":32,"length2":40}]],"length":2202,"saved":false}
{"ts":1375820680206,"patch":[[{"diffs":[[0,"        "],[-1,"R"],[1,"string s ="],[0," \r\n     "]],"start1":1479,"start2":1479,"length1":17,"length2":26}]],"length":2211,"saved":false}
{"ts":1375820704128,"patch":[[{"diffs":[[0,"ing s = "],[1,"multiply(num1[i], c);\r\n            s += z;\r\n            \r\n            z += \"0\";"],[0,"\r\n      "]],"start1":1490,"start2":1490,"length1":16,"length2":95}]],"length":2290,"saved":false}
{"ts":1375820712737,"patch":[[{"diffs":[[0,"z;\r\n            "],[1,"R = add(s,z)"],[0,"\r\n            z "]],"start1":1538,"start2":1538,"length1":32,"length2":44}]],"length":2302,"saved":false}
{"ts":1375820721614,"patch":[[{"diffs":[[0,"add("],[-1,"s,z"],[1,"R,s"],[0,")\r\n "]],"start1":1558,"start2":1558,"length1":11,"length2":11}]],"length":2302,"saved":false}
{"ts":1375820724566,"patch":[[{"diffs":[[0,"\n        }\r\n"],[1,"        return R;\r\n"],[0,"    }\r\n    \r"]],"start1":1590,"start2":1590,"length1":24,"length2":43}]],"length":2321,"saved":false}
{"ts":1375820788150,"patch":[[{"diffs":[[0,"){\r\n        "],[1,"string R;\r\n        \r\n        return R;"],[0,"\r\n    }\r\n   "]],"start1":1018,"start2":1018,"length1":24,"length2":62}]],"length":2359,"saved":false}
{"ts":1375820800576,"patch":[[{"diffs":[[0,"ing R;\r\n        "],[1,"if(num1 == \"0\") return num2;\r\n        if(num1 == \"0\") return num2;"],[0,"\r\n        return"]],"start1":1033,"start2":1033,"length1":32,"length2":98}]],"length":2425,"saved":false}
{"ts":1375820806057,"patch":[[{"diffs":[[0,"\r\n        if(num"],[-1,"1"],[1,"2"],[0," == \"0\") return "]],"start1":1077,"start2":1077,"length1":33,"length2":33},{"diffs":[[0," \"0\") return num"],[-1,"2;"],[1,"1;\r\n        \r\n        "],[0,"\r\n        return"]],"start1":1097,"start2":1097,"length1":34,"length2":54}]],"length":2445,"saved":false}
{"ts":1375820819377,"patch":[[{"diffs":[[0,"      \r\n        "],[1,"int i;\r\n        int j;\r\n        \r\n        for(i=0;i)"],[0,"\r\n        return"]],"start1":1119,"start2":1119,"length1":32,"length2":84}]],"length":2497,"saved":false}
{"ts":1375820830583,"patch":[[{"diffs":[[0,"r(i="],[-1,"0;i)"],[1,"num1.size()-1;i>=0;i++){\r\n            \r\n        }\r\n        "],[0,"\r\n  "]],"start1":1179,"start2":1179,"length1":12,"length2":67}]],"length":2552,"saved":false}
{"ts":1375820862191,"patch":[[{"diffs":[[0,"nt i"],[-1,";\r\n        int j"],[1," = num1.size() -1;\r\n        int j = num2.size() -1"],[0,";\r\n "]],"start1":1136,"start2":1136,"length1":24,"length2":58}]],"length":2586,"saved":false}
{"ts":1375820880056,"patch":[[{"diffs":[[0,"    "],[-1,"for(i=num1.size()-1;i>=0;i++"],[1,"while(i >=0 && j>=0"],[0,"){\r\n"]],"start1":1207,"start2":1207,"length1":36,"length2":27}]],"length":2577,"saved":false}
{"ts":1375820902902,"patch":[[{"diffs":[[0,"ublic:\r\n"],[1,"    \r\n"],[0,"    stri"]],"start1":971,"start2":971,"length1":16,"length2":22}]],"length":2583,"saved":false}
{"ts":1375820904684,"patch":[[{"diffs":[[0,"\npublic:\r\n    \r\n"],[1,"    \r\n"],[0,"    string add(s"]],"start1":969,"start2":969,"length1":32,"length2":38}]],"length":2589,"saved":false}
{"ts":1375820919679,"patch":[[{"diffs":[[0,"ublic:\r\n    "],[1,"char add(char c1, char c2){\r\n        \r\n    }"],[0,"\r\n    \r\n    "]],"start1":971,"start2":971,"length1":24,"length2":68}]],"length":2633,"saved":false}
{"ts":1375820935895,"patch":[[{"diffs":[[0,"char c1, char c2"],[1,", bool overflow"],[0,"){\r\n        \r\n  "]],"start1":992,"start2":992,"length1":32,"length2":47}]],"length":2648,"saved":false}
{"ts":1375820979137,"patch":[[{"diffs":[[0,"){\r\n        "],[1,"int r = c1-'0' + c2-'0' + (overflow);"],[0,"\r\n    }\r\n   "]],"start1":1023,"start2":1023,"length1":24,"length2":61}]],"length":2685,"saved":false}
{"ts":1375820987411,"patch":[[{"diffs":[[0,"c2, "],[-1,"bool"],[1,"int"],[0," ove"]],"start1":1006,"start2":1006,"length1":12,"length2":11}]],"length":2684,"saved":false}
{"ts":1375820990250,"patch":[[{"diffs":[[0,"' + "],[-1,"("],[0,"overflow"],[-1,")"],[0,";\r\n "]],"start1":1056,"start2":1056,"length1":18,"length2":16}]],"length":2682,"saved":false}
{"ts":1375820993558,"patch":[[{"diffs":[[0,"c2, int "],[1,"&"],[0,"overflow"]],"start1":1006,"start2":1006,"length1":16,"length2":17},{"diffs":[[0,"rflow;\r\n"],[1,"        \r\n"],[0,"    }\r\n "]],"start1":1064,"start2":1064,"length1":16,"length2":26}]],"length":2693,"saved":false}
{"ts":1375821039591,"patch":[[{"diffs":[[0,"w;\r\n        "],[1,"if(r > 10){\r\n            overflow = 1;\r\n            r -= 10;\r\n        }else{\r\n            \r\n        }"],[0,"\r\n    }\r\n   "]],"start1":1068,"start2":1068,"length1":24,"length2":125}]],"length":2794,"saved":false}
{"ts":1375821044952,"patch":[[{"diffs":[[0,"e{\r\n            "],[1,"overflow = 0;\r\n        }\r\n        "],[0,"\r\n        }\r\n   "]],"start1":1154,"start2":1154,"length1":32,"length2":66},{"diffs":[[0,"  \r\n        "],[-1,"}"],[0,"\r\n    }\r\n   "]],"start1":1202,"start2":1202,"length1":25,"length2":24}]],"length":2827,"saved":false}
{"ts":1375821052670,"patch":[[{"diffs":[[0,"  \r\n        "],[1,"return r+'0';"],[0,"\r\n    }\r\n   "]],"start1":1202,"start2":1202,"length1":24,"length2":37}]],"length":2840,"saved":false}
{"ts":1375821068682,"patch":[[{"diffs":[[0,"um2.size() -1;\r\n"],[1,"        int overflow = 0;\r\n"],[0,"        \r\n      "]],"start1":1440,"start2":1440,"length1":32,"length2":59},{"diffs":[[0,"){\r\n            "],[1,"char"],[0,"\r\n        }\r\n   "]],"start1":1520,"start2":1520,"length1":32,"length2":36}]],"length":2871,"saved":false}
{"ts":1375821110124,"patch":[[{"diffs":[[0,"string R"],[1," = \"\""],[0,";\r\n     "]],"start1":1293,"start2":1293,"length1":16,"length2":21},{"diffs":[[0,"    char"],[1," c = add(num1[i], num2[i], overflow);\r\n            "],[0,"\r\n      "]],"start1":1537,"start2":1537,"length1":16,"length2":67}]],"length":2927,"saved":false}
{"ts":1375821116131,"patch":[[{"diffs":[[0,");\r\n            "],[1,"R = c + R;"],[0,"\r\n        }\r\n   "]],"start1":1580,"start2":1580,"length1":32,"length2":42}]],"length":2937,"saved":false}
{"ts":1375821150359,"patch":[[{"diffs":[[0,"R = c + R;\r\n"],[1,"            i--;\r\n            j--;\r\n        }\r\n        \r\n        if(i >= 0){\r\n            \r\n"],[0,"        }\r\n "]],"start1":1596,"start2":1596,"length1":24,"length2":116}]],"length":3029,"saved":false}
{"ts":1375821160298,"patch":[[{"diffs":[[0,"        "],[-1,"if"],[1,"while"],[0,"(i >= 0)"]],"start1":1665,"start2":1665,"length1":18,"length2":21},{"diffs":[[0,"){\r\n            "],[1,"char c = add(num1[i], num2[i], overflow);\r\n            R = c + R;"],[0,"\r\n        }\r\n   "]],"start1":1685,"start2":1685,"length1":32,"length2":97}]],"length":3097,"saved":false}
{"ts":1375821166889,"patch":[[{"diffs":[[0," = add(num1[i], "],[-1,"num2[i]"],[1,"'0'"],[0,", overflow);\r\n  "]],"start1":1707,"start2":1707,"length1":39,"length2":35}]],"length":3093,"saved":false}
{"ts":1375821181086,"patch":[[{"diffs":[[0,"   }\r\n        \r\n"],[1,"        while(j >= 0){\r\n            char c = add(num1[i], '0', overflow);\r\n            R = c + R;\r\n        }\r\n        \r\n"],[0,"        return R"]],"start1":1769,"start2":1769,"length1":32,"length2":152}]],"length":3213,"saved":false}
{"ts":1375821208616,"patch":[[{"diffs":[[0,"c + R;\r\n        "],[-1,""],[0,""],[1,"    i--;\r\n        "],[0,"}\r\n        \r\n   "]],"start1":1756,"start2":1756,"length1":32,"length2":50},{"diffs":[[0,"har c = add("],[-1,"num1[i], '0'"],[1,"'0', num2[j]"],[0,", overflow);"]],"start1":1840,"start2":1840,"length1":36,"length2":36},{"diffs":[[0,"c + R;\r\n        "],[-1,"}"],[1,"    j--;\r\n        }\r\n        \r\n        "],[0,"\r\n        \r\n    "]],"start1":1894,"start2":1894,"length1":33,"length2":71}]],"length":3269,"saved":false}
{"ts":1375821246495,"patch":[[{"diffs":[[0,"      \r\n        "],[1,"if(overflow == 1){\r\n            \r\n        }"],[0,"\r\n        \r\n    "]],"start1":1933,"start2":1933,"length1":32,"length2":75}]],"length":3312,"saved":false}
{"ts":1375821255917,"patch":[[{"diffs":[[0,"){\r\n            "],[1,"R = '1' + R;"],[0,"\r\n        }\r\n   "]],"start1":1965,"start2":1965,"length1":32,"length2":44}]],"length":3324,"saved":false}
{"contributors":[],"silentsave":false,"ts":1375834432772,"patch":[[{"diffs":[[0,"orithm>\r"],[1,"\n#include<sstream>\r"],[0,"\n\r\n#incl"]],"start1":373,"start2":373,"length1":16,"length2":35},{"diffs":[[0,"  if(r >"],[-1,""],[0,""],[1,"="],[0," 10){\r\n "]],"start1":1097,"start2":1097,"length1":16,"length2":17},{"diffs":[[0,"], num2["],[-1,"i"],[1,"j"],[0,"], overf"]],"start1":1580,"start2":1580,"length1":17,"length2":17},{"diffs":[[0,"r(int i="],[-1,"0;"],[0,"num1.siz"]],"start1":2469,"start2":2469,"length1":18,"length2":16},{"diffs":[[0,"1.size()"],[-1,";i++"],[1,"-1;i>=0;i--"],[0,"){\r\n    "]],"start1":2480,"start2":2480,"length1":20,"length2":27},{"diffs":[[0,"add(R,s)"],[-1,""],[0,""],[1,";"],[0,"\r\n      "]],"start1":2586,"start2":2586,"length1":16,"length2":17},{"diffs":[[0,"t i="],[-1,"0;i<n;i++"],[1,"n-1;i>=0;i--"],[0,"){//"]],"start1":2999,"start2":2999,"length1":17,"length2":20},{"diffs":[[0,"ain(){\r\n"],[-1,"\t"],[1,"    "],[0,"Solution"]],"start1":3258,"start2":3258,"length1":17,"length2":20},{"diffs":[[0," s;\r\n\r\n\t"],[1,"//"],[0,"cout << "]],"start1":3278,"start2":3278,"length1":16,"length2":18},{"diffs":[[0,"y(\"123\","],[1,"'9') << endl;\r\n\r\n\t//cout << s.add(\"123\",\"0\") << endl;\r\n\tcout << s.multiply(\"123\",\"123\") << endl;\r\n\t//int overflow = 0;\r\n\t//cout << s.add('9','1', overflow) << endl;\r\n\t//cout << s.add(\"9\","],[0,"\"1"],[-1,"23"],[0,"\") << en"]],"start1":3305,"start2":3305,"length1":20,"length2":205}]],"length":3543,"saved":false}
{"contributors":[],"silentsave":false,"ts":1375846516491,"patch":[[{"diffs":[[0," \"\";\r\n        \r\n"],[1,"        vector<strint> M;\r\n        M.resize(10, \"\");\r\n        \r\n"],[0,"        for(int "]],"start1":2969,"start2":2969,"length1":32,"length2":96}]],"length":3607,"saved":false}
{"ts":1375846602360,"patch":[[{"diffs":[[0,"ng s"],[-1," = multiply(num1, num2[i]);"],[1,";\r\n            char c = num2[i];\r\n            if(M[c-'0'] == ''){\r\n                s = multiply(num1, c);\r\n                M[c-'0'] = s;\r\n            }else{\r\n                s = M[c-'0'];\r\n            }\r\n            "],[0,"\r\n  "]],"start1":3158,"start2":3158,"length1":35,"length2":224}]],"length":3796,"saved":false}
{"ts":1375846797401,"patch":[[{"diffs":[[0,"0) return \"0\";\r\n"],[1,"        if(num1 == \"0\" || num2 == \"0\") return \"0\";\r\n        \r\n"],[0,"        string R"]],"start1":2900,"start2":2900,"length1":32,"length2":94},{"diffs":[[0,"or<strin"],[-1,"t"],[1,"g"],[0,"> M;\r\n  "]],"start1":3059,"start2":3059,"length1":17,"length2":17},{"diffs":[[0," == "],[-1,"''"],[1,"\"\""],[0,"){\r\n"]],"start1":3281,"start2":3281,"length1":10,"length2":10}]],"length":3858,"saved":false}
