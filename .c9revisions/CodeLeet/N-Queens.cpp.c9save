{"ts":1375487593861,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*N-Queens IIMar 20 '123565 / 8055\r\nFollow up for N-Queens problem.\r\nNow, instead outputting board configurations, return the total number of distinct solutions.\r\n\r\nAuthor: Wencan Luo\r\nLanguage: C++\r\nDate: 08/02/2013\r\n*/\r\n\r\n#include<iostream>\r\nusing namespace std;\r\n#include<climits>\r\n\r\n#include<vector>\r\n#include<string>\r\n#include<algorithm>\r\n#include<map>\r\n//#include<unordered_set>\r\n\r\n#include<queue>\r\n#include<set>\r\n\r\n// Definition for binary tree\r\n struct TreeNode {\r\n     int val;\r\n     TreeNode *left;\r\n     TreeNode *right;\r\n TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n};\r\n\r\n//Definition for singly-linked list.\r\nstruct ListNode {\r\n    int val;\r\n    ListNode *next;\r\n    ListNode(int x) : val(x), next(NULL) {}\r\n};\r\n\r\n// Definition for an interval.\r\nstruct Interval {\r\n    int start;\r\n    int end;\r\n    Interval() : start(0), end(0) {}\r\n    Interval(int s, int e) : start(s), end(e) {}\r\n};\r\n\r\nclass Solution {\r\npublic:\r\n    void swap(vector<int> &A, int i, int j){\r\n        int t = A[i];\r\n        A[i] = A[j];\r\n        A[j] = t;\r\n    }\r\n    \r\n    bool Check(vector<int> &A, int k){\r\n        if(k<=0) return true;\r\n        \r\n        int n=A.size();\r\n        \r\n        for(int i=0;i<k;i++){\r\n            if(A[k] == A[i]) return false;\r\n            if(abs(A[k]-A[i]) == abs(k-i)) return false;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    void Permutation(vector<int> &A, int k, int &R){\r\n        int n=A.size();\r\n        \r\n        if(k==n-1){\r\n            if(Check(A, k)){\r\n               R++;\r\n            }\r\n            return;\r\n        }\r\n        \r\n        for(int i=k;i<n;i++){\r\n            swap(A,k,i);\r\n            //check A\r\n            if(Check(A, k)){\r\n                Permutation(A, k+1, R);\r\n            }\r\n            \r\n            swap(A,k,i);//swap back\r\n        }\r\n    }\r\n    \r\n    int totalNQueens(int n) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        int R = 0;\r\n        if(n==0) {\r\n            return R;\r\n        }\r\n        \r\n        vector<int> A;\r\n        A.resize(n);\r\n        \r\n        for(int i=0;i<n;i++){\r\n            A[i] = i;\r\n        }\r\n        \r\n        //generate all the permutations\r\n\t\tPermutation(A, 0, R);\r\n\r\n        return R;\r\n    }\r\n};\r\n\r\nvoid main(){\r\n\tSolution s;\r\n\r\n    int R = s.totalNQueens(8);\r\n\tcout << R << endl;\r\n\r\n\tsystem(\"pause\");\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":2365}]],"length":2365}
{"contributors":[],"silentsave":false,"ts":1375487762128,"patch":[[{"diffs":[[0,"eens"],[-1," II"],[0,"Mar "]],"start1":6,"start2":6,"length1":11,"length2":8},{"diffs":[[0," '12"],[-1,"35"],[1,"29"],[0,"65 / "],[-1,"8055\r\nFollow up for N-Queens problem.\r\nNow,"],[1,"9262\r\nThe n-queens puzzle is the problem of placing n queens on an n*n chessboard such that no two queens attack each other.\r\n\r\n\r\n\r\nGiven an"],[0," in"],[-1,"s"],[0,"te"],[-1,"ad outputting board configurations, return the total number of distinct solutions."],[1,"ger n, return all distinct solutions to the n-queens puzzle.\r\n\r\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.\r\n\r\nFor example,\r\nThere exist two distinct solutions to the 4-queens puzzle:\r\n\r\n[\r\n [\".Q..\",  // Solution 1\r\n  \"...Q\",\r\n  \"Q...\",\r\n  \"..Q.\"],\r\n\r\n [\"..Q.\",  // Solution 2\r\n  \"Q...\",\r\n  \"...Q\",\r\n  \".Q..\"]\r\n]"],[0,"\r\n\r\n"]],"start1":16,"start2":16,"length1":146,"length2":583},{"diffs":[[0,"   }\r\n    \r\n"],[1,"    vector<string> getMap(vector<int> &A){\r\n        vector<string> M;\r\n        int n = A.size();\r\n        string s = \"\";\r\n        s.resize(n, '.');\r\n        \r\n        for(int i=0;i<n;i++){\r\n            string t = s;\r\n            t[A[i]] = 'Q';\r\n            M.push_back(t);\r\n        }\r\n        \r\n        return M;\r\n    }\r\n    \r\n"],[0,"    bool Che"]],"start1":1484,"start2":1484,"length1":24,"length2":351},{"diffs":[[0," int k, "],[-1,"int"],[1,"vector<vector<string> >"],[0," &R){\r\n "]],"start1":2154,"start2":2154,"length1":19,"length2":39},{"diffs":[[0,"    "],[-1,"R++"],[1," R.push_back(getMap(A))"],[0,";\r\n "]],"start1":2289,"start2":2289,"length1":11,"length2":31},{"diffs":[[0,"    "],[-1,"int total"],[1,"vector<vector<string> > solve"],[0,"NQue"]],"start1":2617,"start2":2617,"length1":17,"length2":37},{"diffs":[[0,"    "],[-1,"int R = 0;\r\n        if(n==0) {"],[1,"vector<vector<string> > R;\r\n        if(n==0) {\r\n            vector<string> t;\r\n            t.push_back(\"\");\r\n            R.push_back(t);"],[0,"\r\n  "]],"start1":2768,"start2":2768,"length1":38,"length2":144},{"diffs":[[0,"ations\r\n"],[-1,"\t"],[1,"    "],[0,"\tPermuta"]],"start1":3118,"start2":3118,"length1":17,"length2":20},{"diffs":[[0,"    "],[-1,"int"],[1,"vector<vector<string> >"],[0," R = s."],[-1,"total"],[1,"solve"],[0,"NQue"]],"start1":3218,"start2":3218,"length1":23,"length2":43},{"diffs":[[0,"out << R"],[1,".size()"],[0," << endl"]],"start1":3272,"start2":3272,"length1":16,"length2":23},{"diffs":[[0,"ndl;\r\n\r\n"],[1,"    /*for(int i=0;i<R.size();i++){\r\n        vector<string> M = R[i];\r\n        for(int j=0;j<M.size();j++){\r\n            cout << M[j] << endl;\r\n        }\r\n        cout << endl;\r\n    }*/\r\n \r\n"],[0,"\tsystem("]],"start1":3292,"start2":3292,"length1":16,"length2":205}]],"length":3511,"saved":false}
