{"ts":1376944885762,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*Palindrome Partitioning II\r\nGiven a string s, partition s such that every substring of the partition is a palindrome.\r\n\r\nReturn the minimum cuts needed for a palindrome partitioning of s.\r\n\r\nFor example, given s = \"aab\",\r\nReturn 1 since the palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut\r\n\t\r\nPalindrome Partitioning\r\nGiven a string s, partition s such that every substring of the partition is a palindrome.\r\n\r\nReturn all possible palindrome partitioning of s.\r\n\r\nFor example, given s = \"aab\",\r\nReturn\r\n\r\n  [\r\n    [\"aa\",\"b\"],\r\n    [\"a\",\"a\",\"b\"]\r\n  ]\r\n\r\nAuthor: Wencan Luo\r\nLanguage: C++\r\nDate: 06/04/2013\r\n*/\r\n\r\n#include<iostream>\r\nusing namespace std;\r\n\r\n#include<vector>\r\n#include<string>\r\n#include<algorithm>\r\n\r\nclass Solution {\r\npublic:\r\n\r\n\tvoid PrintMatrix(vector<vector<int>> A){\r\n\t\tfor(int i=0;i<A.size();i++){\r\n\t\t\tfor(int j=0;j<A.size();j++){\r\n\t\t\t\tcout << A[i][j];\r\n\t\t\t}\r\n\t\t\tcout << endl;\r\n\t\t}\r\n\t}\r\n\r\n\tbool checkPalindrome(string s, int i, int j){\r\n\t\tfor(int k=i; k < (j+i)/2; k++){\r\n\t\t\tif(s[k] != s[i+j-k-1]) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tvoid MultipleVectors(vector<vector<string>> &left, vector<vector<string>> &right, vector<vector<string>> &res){\r\n\t\tfor(vector<vector<string>>::iterator it1 = left.begin(); it1 < left.end(); it1++){\r\n\t\t\tfor(vector<vector<string>>::iterator it2 = right.begin(); it2 < right.end(); it2++){\r\n\t\t\t\tvector<string> tmp(it1->begin(), it1->end());\r\n\t\t\t\ttmp.insert(tmp.end(), it2->begin(), it2->end());\r\n\t\t\t\tres.push_back(tmp);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tvector<vector<string>> RecusivePartition(string s,  int i, int j) {\r\n\t\tvector<vector<string>> res;\r\n\t\tif(i > j-1) return res;\r\n\t\tif(i==j-1){\r\n\t\t\tvector<string> tmp;\r\n\t\t\ttmp.push_back(s.substr(i,j-i));\r\n\t\t\tres.push_back(tmp);\r\n\t\t\treturn res;\r\n\t\t}\r\n\r\n\t\tif(checkPalindrome(s, i, j)){\r\n\t\t\tvector<string> tmp;\r\n\t\t\ttmp.push_back(s.substr(i,j-i));\r\n\t\t\tres.push_back(tmp);\r\n\t\t}\r\n\r\n\t\tfor(int k=i+1;k<j;k++){\r\n\t\t\tvector<vector<string>> left;// = RecusivePartition(s, i, k);\r\n\t\t\tif(checkPalindrome(s, i, k))\r\n\t\t\t{\r\n\t\t\t\tvector<string> tmp;\r\n\t\t\t\ttmp.push_back(s.substr(i,k-i));\r\n\t\t\t\tleft.push_back(tmp);\r\n\r\n\t\t\t\tvector<vector<string>> right = RecusivePartition(s, k, j);\r\n\t\t\t\tMultipleVectors(left, right, res);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn res;\r\n    }\r\n\r\n    vector<vector<string>> partition(string s) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n\t\tvector<vector<string>> vec = RecusivePartition(s, 0, s.size());\t\r\n\t\treturn vec;\r\n    }\r\n\r\n\tvoid CheckPalindromeN2_2(string s, vector< vector<int> > &A){\r\n\t\tint n = s.size();\r\n\r\n\t\tfor(int i=0;i<n-1;i++){\r\n\t\t\tint j = i;\r\n\t\t\twhile(j >= 0 && 2*i-j+1 < n && s[j] == s[2*i-j+1] )\r\n\t\t\t{\r\n\t\t\t\tA[2*j][2*(2*i-j+1)+1] = 0;\r\n\t\t\t\tj--;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(int i=0;i<n-2;i++){\r\n\t\t\tint j = i;\r\n\t\t\twhile(j >= 0 && 2*i-j+2 < n && s[j] == s[2*i-j+2] )\r\n\t\t\t{\r\n\t\t\t\tA[2*j][2*(2*i-j+2)+1] = 0;\r\n\t\t\t\tj--;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tvoid CheckPalindromeN2(string s, vector< vector<int> > &A){\r\n\t\tint n = s.size();\r\n\r\n\t\tfor(int i=0;i<n-1;i++){\r\n\t\t\tint j = i;\r\n\t\t\twhile(j >= 0 && 2*i-j+1 < n && s[j] == s[2*i-j+1] )\r\n\t\t\t{\r\n\t\t\t\tA[j][2*i-j+1+1] = 1;\r\n\t\t\t\tj--;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(int i=0;i<n-2;i++){\r\n\t\t\tint j = i;\r\n\t\t\twhile(j >= 0 && 2*i-j+2 < n && s[j] == s[2*i-j+2] )\r\n\t\t\t{\r\n\t\t\t\tA[j][2*i-j+2+1] = 1;\r\n\t\t\t\tj--;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tint minCut(string s){\r\n\t\tint n = s.size();\r\n\t\tif(n==1) return 0;\r\n\r\n\t\tvector< vector<int> > A;\r\n\t\tA.resize(n+1);\r\n\t\tfor(vector< vector<int> >::iterator it = A.begin(); it < A.end(); it++){\r\n\t\t\tit->resize(n+1);\r\n\r\n\t\t\tfor(vector<int>::iterator it2 = it->begin(); it2 < it->end(); it2++){\r\n\t\t\t\t*it2 = n+1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//link A with B\r\n\t\tfor(int i=0;i<n;i++){\r\n\t\t\tA[i][i+1] = 1;\r\n\t\t}\r\n\r\n\t\tCheckPalindromeN2(s, A);\r\n\r\n\t\t/*for(int i=0;i<n;i++){\r\n\t\t\tfor(int j=i+1;j<n;j++){\r\n\t\t\t\tA[i][j] = checkPalindrome(s, i, j+1) ? 0 : A[i][j];\r\n\t\t\t}\r\n\t\t}*/\r\n\t\t\r\n\t\t//PrintMatrix(A);\r\n\r\n\t\t//if( A[0][n-1] != n) return 0;\r\n\r\n\t\tvector<int> D;\r\n\t\tD.resize(n+1);\r\n\t\tfor(int i=0;i<n+1;i++){\r\n\t\t\tD[i] = A[0][i];\r\n\t\t}\r\n\t\tD[0] = 0;\r\n\r\n\t\t//Shortest path for the dag\r\n\t\tfor(int i=0;i<n+1;i++){\r\n\t\t\tfor(int j=i+1;j<n+1;j++){\r\n\t\t\t\tif(A[i][j] != n+1){\r\n\t\t\t\t\tif(D[j] > D[i] + A[i][j]){\r\n\t\t\t\t\t\tD[j] = D[i] + A[i][j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*for(int i=0;i<n+1;i++){\r\n\t\t\tcout << D[i];\r\n\t\t}\r\n\t\tcout << endl;*/\r\n\r\n\t\treturn D[n]-1;\r\n\t\t//return A[0][2*n-1];\r\n\t}\r\n\r\n\tint minCut2(string s){\r\n\t\tint n = s.size();\r\n\t\tif(n==1) return 0;\r\n\r\n\t\t//cout << n << endl;\r\n\r\n\t\tvector< vector<int> > A;\r\n\t\tA.resize(2*n);\r\n\t\tfor(vector< vector<int> >::iterator it = A.begin(); it < A.end(); it++){\r\n\t\t\tit->resize(2*n);\r\n\r\n\t\t\tfor(vector<int>::iterator it2 = it->begin(); it2 < it->end(); it2++){\r\n\t\t\t\t*it2 = 2*n;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//link A with A'\r\n\t\tfor(int i=0;i<2*n;i = i + 2){\r\n\t\t\tA[i][i+1] = 0;\r\n\t\t}\r\n\r\n\t\t//link A' to B\r\n\t\tfor(int i=0;i<2*(n-1);i = i + 2){\r\n\t\t\tA[i+1][i+2] = 1;\r\n\t\t}\r\n\r\n\t\tCheckPalindromeN2(s, A);\r\n\r\n\t\t/*for(int i=0;i<n;i++){\r\n\t\t\tfor(int j=i+1;j<n;j++){\r\n\t\t\t\tA[i][j] = checkPalindrome(s, i, j+1) ? 0 : A[i][j];\r\n\t\t\t}\r\n\t\t}*/\r\n\t\t\r\n\t\t//PrintMatrix(A);\r\n\r\n\t\t//if( A[0][n-1] != n) return 0;\r\n\r\n\t\t/*vector<int> D;\r\n\t\tD.resize(2*n);\r\n\t\tfor(int i=0;i<2*n;i++){\r\n\t\t\tD[i] = A[0][i];\r\n\t\t}\r\n\t\tD[0] = 0;\r\n\t\t*/\r\n\r\n\t\t//Shortest path for the dag\r\n\t\tfor(int i=0;i<2*n;i++){\r\n\t\t\tfor(int j=i+1;j<2*n;j++){\r\n\t\t\t\tif(A[i][j] != 2*n){\r\n\t\t\t\t\t//if(D[i] + A[i][j] < D[j]){\r\n\t\t\t\t\t//\tD[j] = D[i] + A[i][j];\r\n\t\t\t\t\t//}\r\n\t\t\t\t\tif(A[0][i] + A[i][j] < A[0][j]){\r\n\t\t\t\t\t\tA[0][j] = A[0][i] + A[i][j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*for(int i=0;i<2*n;i++){\r\n\t\t\tcout << D[i];\r\n\t\t}\r\n\t\tcout << endl;*/\r\n\r\n\t\t//return D[2*n-1];\r\n\t\treturn A[0][2*n-1];\r\n\t}\r\n\r\n\tint minCut_power2n(string s) { //2^n\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        vector<vector<string>> res = partition(s);\r\n\t\tint minCount = s.size();\r\n\t\tfor(vector<vector<string>>::iterator it = res.begin(); it < res.end(); it++){\r\n\t\t\tif(it->size() < minCount){\r\n\t\t\t\tminCount = it->size();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn minCount - 1;\r\n    }\r\n};\r\n\r\n\r\nvoid main(){\r\n\tSolution s;\r\n\t//vector<vector<string>> res = s.partition(\"ababbbabbaba\");\r\n\t//s.PrintVector(res);\r\n\r\n\t//cout << s.minCut(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") << endl;\r\n\t//cout << s.minCut(\"aa\") << endl;\r\n\t//cout << s.minCut(\"abaa\") << endl;\r\n\tcout << s.minCut(\"ab\") << endl;\r\n\t//cout << s.minCut(\"aa\") << endl;\r\n\r\n\tsystem(\"pause\");\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":7785}]],"length":7785}
