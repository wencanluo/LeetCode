{"ts":1375568962323,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*Climbing StairsApr 3 '125183 / 9882\r\nYou are climbing a stair case. It takes n steps to reach to the top.\r\n\r\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\r\n\r\nAuthor: Wencan Luo\r\nLanguage: C++\r\nDate: 07/29/2013\r\n*/\r\n\r\n#include<iostream>\r\nusing namespace std;\r\n\r\n#include<vector>\r\n#include<string>\r\n#include<algorithm>\r\n\r\n#include<map>\r\n//#include<unordered_set>\r\n\r\n#include<queue>\r\n#include<set>\r\n#include<stack>\r\n\r\n// Definition for binary tree\r\n struct TreeNode {\r\n     int val;\r\n     TreeNode *left;\r\n     TreeNode *right;\r\n TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n};\r\n \r\nclass Solution {\r\npublic:\r\n    int climbStairs(int n) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        if(n<=0) return 0;\r\n\t\tif(n==1) return 1;\r\n\t\tif(n==2) return 2;\r\n\r\n\t\tint Fn,Fn1=1,Fn2=2;\r\n\r\n\t\tfor(int i=3;i<=n;i++){\r\n\t\t\tFn=Fn1+Fn2;\r\n\t\t\tFn1=Fn2;\r\n\t\t\tFn2=Fn;\r\n\t\t}\r\n\t\treturn Fn;\r\n    }\r\n};\r\n\r\nvoid main(){\r\n\tSolution s;\r\n\t\r\n\t//cout << s.simplifyPath(\"/a/./b/../../c/\") << endl;\r\n\tcout << s.climbStairs(4) << endl;\r\n\r\n\tsystem(\"pause\");\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":1138}]],"length":1138}
{"contributors":[],"silentsave":false,"ts":1375568985845,"patch":[[{"diffs":[[0,"/*"],[-1,"Climbing StairsApr 3 '125183 / 9882\r\nYou are climbing a stair case. It takes n steps to reach to the top.\r\n\r\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?"],[1,"AnagramsMar 19 '124462 / 14729\r\nGiven an array of strings, return all groups of strings that are anagrams.\r\nNote: All inputs will be in lower-case."],[0,"\r\n\r\n"]],"start1":0,"start2":0,"length1":211,"length2":153},{"diffs":[[0,"e: 0"],[-1,"7/29"],[1,"8/03"],[0,"/201"]],"start1":191,"start2":191,"length1":12,"length2":12}]],"length":1080,"saved":false}
{"ts":1375569023539,"patch":[[{"diffs":[[0,"/*"],[-1,"Anagrams"],[1,"Rotate Image"],[0,"Mar 1"],[-1,"9"],[1,"8"],[0," '12"],[-1,"4462 / 14729\r\nGiven an array of strings, return all groups of strings that are anagrams.\r\nNote: All inputs will be in lower-case."],[1,"3674 / 8447\r\nYou are given an n x n 2D matrix representing an image.\r\n\r\nRotate the image by 90 degrees (clockwise).\r\n\r\nFollow up:\r\nCould you do this in-place?"],[0,"\r\n\r\n"]],"start1":0,"start2":0,"length1":153,"length2":186}]],"length":1113,"saved":false}
{"ts":1375569034939,"patch":[[{"diffs":[[0,"    "],[-1,"int climbStairs(int n"],[1,"void rotate(vector<vector<int> > &matrix"],[0,") {\r"]],"start1":643,"start2":643,"length1":29,"length2":48},{"diffs":[[0,"    "],[-1,"if(n<=0) return 0;\r\n\t\tif(n==1) return 1;\r\n\t\tif(n==2) return 2;\r\n\r\n\t\tint Fn,Fn1=1,Fn2=2;\r\n\r\n\t\tfor(int i=3;i<=n;i++){\r\n\t\t\tFn=Fn1+Fn2;\r\n\t\t\tFn1=Fn2;\r\n\t\t\tFn2=Fn;\r\n\t\t}\r\n\t\treturn Fn;\r\n    }\r\n};\r\n\r\nvoid main(){\r\n\tSolution s;\r\n\t\r\n\t//cout << s.simplifyPath(\"/a/./b/../../c/\") << endl;\r\n\tcout << s.climbStairs(4) << endl;"],[1,"\r\n    }\r\n};\r\n\r\nvoid main(){\r\n\tSolution s;\r\n\t\r\n\t"],[0,"\r\n\r\n"]],"start1":792,"start2":792,"length1":318,"length2":55}]],"length":869,"saved":false}
{"ts":1375569772037,"patch":[[{"diffs":[[0,"        "],[1,"int n = matrix.size();\r\n        if(n == 0) return;\r\n        \r\n        for(int i=)"],[0,"\r\n    }\r"]],"start1":788,"start2":788,"length1":16,"length2":97}]],"length":950,"saved":false}
{"ts":1375569786742,"patch":[[{"diffs":[[0,"r(int i="],[-1,")"],[1,"0;i<n/2;i++){\r\n            \r\n        }\r\n        "],[0,"\r\n    }\r"]],"start1":868,"start2":868,"length1":17,"length2":64}]],"length":997,"saved":false}
{"ts":1375569827309,"patch":[[{"diffs":[[0,"int "],[-1,"i=0;i"],[1,"k=0;k"],[0,"<n/2;"],[-1,"i"],[1,"k"],[0,"++){"]],"start1":870,"start2":870,"length1":19,"length2":19}]],"length":997,"saved":false}
{"ts":1375569898538,"patch":[[{"diffs":[[0,"){\r\n            "],[1,"for(int i=k;k<n-k-1;i++){\r\n                \r\n            }"],[0,"\r\n        }\r\n   "]],"start1":887,"start2":887,"length1":32,"length2":90}]],"length":1055,"saved":false}
{"ts":1375569902738,"patch":[[{"diffs":[[0,"int i=k;"],[-1,"k"],[1,"i"],[0,"<n-k-1;i"]],"start1":907,"start2":907,"length1":17,"length2":17}]],"length":1055,"saved":false}
{"ts":1375569941158,"patch":[[{"diffs":[[0,"-k-1;i++){\r\n"],[1,"                int t = matrix[k][i];\r\n"],[0,"            "]],"start1":918,"start2":918,"length1":24,"length2":63}]],"length":1094,"saved":false}
{"ts":1375570083032,"patch":[[{"diffs":[[0,"k][i];\r\n"],[1,"                matrix[i][n-k-1]\r\n"],[0,"        "]],"start1":961,"start2":961,"length1":16,"length2":50}]],"length":1128,"saved":false}
{"ts":1375570088503,"patch":[[{"diffs":[[0,"n-k-1]\r\n"],[1,"                matrix[i][n-k-1]\r\n"],[0,"        "]],"start1":995,"start2":995,"length1":16,"length2":50}]],"length":1162,"saved":false}
{"ts":1375570160532,"patch":[[{"diffs":[[0,"         matrix["],[-1,"i"],[1,"n-k-1][n-k-1+i-k]\r\n                matrix[n-k-1+i-k"],[0,"][n-k-1]\r\n      "]],"start1":1010,"start2":1010,"length1":33,"length2":83}]],"length":1212,"saved":false}
{"ts":1375570184217,"patch":[[{"diffs":[[0,"-1+i-k]["],[-1,"n-k-1"],[1,"k"],[0,"]\r\n     "]],"start1":1071,"start2":1071,"length1":21,"length2":17}]],"length":1208,"saved":false}
{"ts":1375570211166,"patch":[[{"diffs":[[0,"k][i];\r\n"],[1,"                matrix[k][i] = matrix[n-k-1+i-k][k];\r\n"],[0,"        "]],"start1":961,"start2":961,"length1":16,"length2":70}]],"length":1262,"saved":false}
{"ts":1375570251279,"patch":[[{"diffs":[[0,"rix["],[-1,"i]["],[0,"n-k-1"],[-1,"]\r\n               "],[1,"+i-k][k] ="],[0," mat"]],"start1":1042,"start2":1042,"length1":34,"length2":23},{"diffs":[[0,"k-1+i-k]"],[1,";"],[0,"\r\n      "]],"start1":1078,"start2":1078,"length1":16,"length2":17},{"diffs":[[0,"-k-1"],[-1,"+i-k][k]\r\n                "],[1,"][n-k-1+i-k] = matrix[i][n-k-1];\r\n                matrix[i][n-k-1] = t;"],[0,"\r\n  "]],"start1":1113,"start2":1113,"length1":34,"length2":79}]],"length":1297,"saved":false}
{"ts":1375570280980,"patch":[[{"diffs":[[0,"     }\r\n"],[-1,"        \r\n"],[0,"    }\r\n}"]],"start1":1208,"start2":1208,"length1":26,"length2":16}]],"length":1287,"saved":false}
{"ts":1375570828061,"patch":[[{"diffs":[[0," = matrix[n-"],[-1,"k-1+"],[0,"i-"],[-1,"k"],[1,"1"],[0,"][k];\r\n     "]],"start1":997,"start2":997,"length1":31,"length2":27},{"diffs":[[0,"atrix[n-"],[-1,"k-1+"],[0,"i-"],[-1,"k"],[1,"1"],[0,"][k] = m"]],"start1":1036,"start2":1036,"length1":23,"length2":19},{"diffs":[[0,"-k-1][n-"],[-1,"k-1+"],[0,"i-"],[-1,"k"],[1,"1"],[0,"];\r\n    "]],"start1":1062,"start2":1062,"length1":23,"length2":19},{"diffs":[[0,"][n-"],[-1,"k-1+"],[0,"i-"],[-1,"k"],[1,"1"],[0,"] = "]],"start1":1105,"start2":1105,"length1":15,"length2":11}]],"length":1271,"saved":false}
