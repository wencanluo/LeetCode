{"ts":1377042662405,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*Reverse IntegerDec 26 '117473 / 13344\r\nReverse digits of an integer.\r\n\r\nExample1: x = 123, return 321\r\nExample2: x = -123, return -321\r\n\r\nAuthor: Wencan Luo\r\nLanguage: C++\r\nDate: 08/17/2013\r\n*/\r\n\r\n#include<iostream>\r\nusing namespace std;\r\n#include<climits>\r\n\r\n#include<vector>\r\n#include<string>\r\n#include<algorithm>\r\n\r\n#include<map>\r\n//#include<unordered_set>\r\n\r\n#include<queue>\r\n#include<set>\r\n\r\n// Definition for binary tree\r\n struct TreeNode {\r\n     int val;\r\n     TreeNode *left;\r\n     TreeNode *right;\r\n TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n};\r\n\r\n//Definition for singly-linked list.\r\nstruct ListNode {\r\n    int val;\r\n    ListNode *next;\r\n    ListNode(int x) : val(x), next(NULL) {}\r\n};\r\n\r\n// Definition for an interval.\r\nstruct Interval {\r\n    int start;\r\n    int end;\r\n    Interval() : start(0), end(0) {}\r\n    Interval(int s, int e) : start(s), end(e) {}\r\n};\r\n\r\nclass Solution {\r\npublic:\r\n    int reverse(int x) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n\t\tlong xx = x;\r\n\t\tif(x < 0) xx = -xx;\r\n\r\n        long y = 0;\r\n\t\twhile(xx){\r\n\t\t\ty = y*10 + xx%10;\r\n\t\t\txx/=10;\r\n\t\t}\r\n\t\tif(x < 0) return -y;\r\n\t\treturn y;\r\n    }\r\n};\r\n\r\nvoid main(){\r\n\tSolution s;\r\n\r\n\tcout << s.isPalindrome(-2147447412) << endl;\r\n\r\n\tsystem(\"pause\");\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":1304}]],"length":1304}
{"contributors":[],"silentsave":false,"ts":1377042670898,"patch":[[{"diffs":[[0,"/*Re"],[-1,"verse IntegerDec 26 '117473 / 13344\r\nReverse digits of an integer.\r\n\r\nExample1: x = 123, return 321\r\nExample2: x = -123, return -321"],[1,"gular Expression MatchingJan 8 '126668 / 25265\r\nImplement regular expression matching with support for '.' and '*'.\r\n\r\n'.' Matches any single character.\r\n'*' Matches zero or more of the preceding element.\r\n\r\nThe matching should cover the entire input string (not partial).\r\n\r\nThe function prototype should be:\r\nbool isMatch(const char *s, const char *p)\r\n\r\nSome examples:\r\nisMatch(\"aa\",\"a\") ? false\r\nisMatch(\"aa\",\"aa\") ? true\r\nisMatch(\"aaa\",\"aa\") ? false\r\nisMatch(\"aa\", \"a*\") ? true\r\nisMatch(\"aa\", \".*\") ? true\r\nisMatch(\"ab\", \".*\") ? true\r\nisMatch(\"aab\", \"c*a*b\") ? true"],[0,"\r\n\r\n"]],"start1":0,"start2":0,"length1":140,"length2":578}]],"length":1742,"saved":false}
{"ts":1377042675062,"patch":[[{"diffs":[[0," 08/"],[-1,"17"],[1,"20"],[0,"/201"]],"start1":618,"start2":618,"length1":10,"length2":10}]],"length":1742,"saved":false}
{"ts":1377042691054,"patch":[[{"diffs":[[0,"    "],[-1,"int reverse(int x"],[1,"bool isMatch(const char *s, const char *p"],[0,") {\r"]],"start1":1354,"start2":1354,"length1":25,"length2":49},{"diffs":[[0,"tion"],[-1,"\r\n\t\tlong xx = x;\r\n\t\tif(x < 0) xx = -xx;\r\n\r\n        long y = 0;\r\n\t\twhile(xx){\r\n\t\t\ty = y*10 + xx%10;\r\n\t\t\txx/=10;\r\n\t\t}\r\n\t\tif(x < 0) return -y;\r\n\t\treturn y;"],[1,"    \r\n        "],[0,"\r\n  "]],"start1":1494,"start2":1494,"length1":160,"length2":22}]],"length":1628,"saved":false}
{"ts":1377042695238,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"// Definition for binary tree\r\n struct TreeNode {\r\n     int val;\r\n     TreeNode *left;\r\n     TreeNode *right;\r\n TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n};\r\n\r\n//Definition for singly-linked list.\r\nstruct ListNode {\r\n    int val;\r\n    ListNode *next;\r\n    ListNode(int x) : val(x), next(NULL) {}\r\n};\r\n\r\n// Definition for an interval.\r\nstruct Interval {\r\n    int start;\r\n    int end;\r\n    Interval() : start(0), end(0) {}\r\n    Interval(int s, int e) : start(s), end(e) {}\r\n};\r\n"],[0,"\r\ncl"]],"start1":833,"start2":833,"length1":496,"length2":8}]],"length":1140,"saved":false}
{"ts":1377042696233,"patch":[[{"diffs":[[0,"set>\r\n\r\n"],[-1,"\r\n"],[0,"class So"]],"start1":829,"start2":829,"length1":18,"length2":16}]],"length":1138,"saved":false}
{"ts":1377042712888,"patch":[[{"diffs":[[0,"ublic:\r\n"],[1,"\r\n"],[0,"    bool"]],"start1":856,"start2":856,"length1":16,"length2":18}]],"length":1140,"saved":false}
{"ts":1377042714000,"patch":[[{"diffs":[[0,"ublic:\r\n"],[1,"    "],[0,"\r\n    bo"]],"start1":856,"start2":856,"length1":16,"length2":20}]],"length":1144,"saved":false}
{"ts":1377042717498,"patch":[[{"diffs":[[0,"ublic:\r\n"],[1,"    bool isMatch(const char *s, const char *p) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function    \r\n        \r\n    }\r\n"],[0,"    \r\n  "]],"start1":856,"start2":856,"length1":16,"length2":183}]],"length":1311,"saved":false}
{"ts":1377042719523,"patch":[[{"diffs":[[0,"    bool isMatch"],[1,"Rec"],[0,"(const char *s, "]],"start1":864,"start2":864,"length1":32,"length2":35}]],"length":1314,"saved":false}
{"ts":1377042726489,"patch":[[{"diffs":[[0,"c(const char *s,"],[1," int m,"],[0," const char *p) "]],"start1":882,"start2":882,"length1":32,"length2":39}]],"length":1321,"saved":false}
{"ts":1377042729439,"patch":[[{"diffs":[[0,"m, const char *p"],[1,", int n"],[0,") {\r\n        // "]],"start1":903,"start2":903,"length1":32,"length2":39}]],"length":1328,"saved":false}
{"ts":1377042777415,"patch":[[{"diffs":[[0,") function    \r\n"],[1,"        int m = strlen(s);\r\n        int n = strlen(p);\r\n"],[0,"        \r\n    }\r"]],"start1":1188,"start2":1188,"length1":32,"length2":88}]],"length":1384,"saved":false}
{"ts":1377042785747,"patch":[[{"diffs":[[0,"en(p);\r\n        "],[1,"return isMatchRec(s, m, p, n)"],[0,"\r\n    }\r\n};\r\n\r\nv"]],"start1":1252,"start2":1252,"length1":32,"length2":61}]],"length":1413,"saved":false}
{"ts":1377042786960,"patch":[[{"diffs":[[0,"m, p, n)"],[1,";"],[0,"\r\n    }\r"]],"start1":1289,"start2":1289,"length1":16,"length2":17}]],"length":1414,"saved":false}
{"contributors":[],"silentsave":false,"ts":1377045376383,"patch":[[{"diffs":[[0,"function"],[1,"\r\n"],[0,"    "],[-1,"\r\n        "],[1,"    if(m==0 && n==0) return true;\r\n    \tif(m==0) return false;\r\n\t\tif(n==0) return false;\r\n\t\tif(s[0] == '*') return false;\r\n\t\tif(p[0] == '*') return false;\r\n\r\n\t\tif(s[m-1] == '*'){\r\n\t\t\tif(s[m-2] == '*') return isMatchRec(s, m-1, p, n);\r\n\r\n\t\t\tif(p[n-1] == '*'){\r\n\t\t\t\tif(p[n-1] == '*') return isMatchRec(s, m, p, n-1);\r\n\t\t\t\t\r\n\t\t\t\tif(s[m-2] == '.' || p[n-2] == '.' || p[n-2] == s[m-2]){\r\n\t\t\t\t\treturn isMatchRec(s, m-1, p, n-1) || isMatchRec(s, m-1, p, n) || isMatchRec(s, m, p, n-1);\r\n\t\t\t\t}\r\n\t\t\t}else if(p[n-1] == '.'){\r\n\t\t\t\treturn isMatchRec(s, m-1, p, n-1) || isMatchRec(s, m-1, p, n) || isMatchRec(s, m, p, n-1);\r\n\t\t\t}else{\r\n\t\t\t\tif(s[m-2] == '.' || p[n-2] == s[m-1]){\r\n\t\t\t\t\t return isMatchRec(s, m-1, p, n-1) || isMatchRec(s, m-1, p, n) || isMatchRec(s, m, p, n-1);\r\n\t\t\t\t}else{\r\n\t\t\t\t\treturn isMatchRec(s, m, p, n-1);//no match\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else if(s[m] == '.'){\r\n\t\t\tif(p[n] == '*'){\r\n\t\t\t\tif(p[n-1] == '*') return isMatchRec(s, m, p, n-1);\r\n\t\t\t\treturn isMatchRec(s, m-1, p, n-1) || isMatchRec(s, m-1, p, n) || isMatchRec(s, m, p, n-1);\r\n\t\t\t}else if(p[n] == '.'){\r\n\t\t\t\treturn isMatchRec(s, m-1, p, n-1);\r\n\t\t\t}else{\r\n\t\t\t\treturn isMatchRec(s, m-1, p, n-1);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif(p[n] == '*'){\r\n\t\t\t\tif(p[n-1] == '*') return isMatchRec(s, m, p, n-1);\r\n\t\t\t\tif(p[n-1] == '.' || p[n-1] == s[m]){\r\n\t\t\t\t\t return isMatchRec(s, m-1, p, n-1) || isMatchRec(s, m-1, p, n) || isMatchRec(s, m, p, n-1);\r\n\t\t\t\t}else{\r\n\t\t\t\t\treturn isMatchRec(s, m, p, n-1);//no match\r\n\t\t\t\t}\r\n\t\t\t}else if(p[n] == '.'){\r\n\t\t\t\treturn isMatchRec(s, m-1, p, n-1);\r\n\t\t\t}else{\r\n\t\t\t\tif(s[m] != s[n]) return false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;"],[0,"\r\n    }\r"]],"start1":1017,"start2":1017,"length1":30,"length2":1618},{"diffs":[[0,"s.is"],[-1,"Palindrome(-2147447412"],[1,"Match(\".*\", \"1\""],[0,") <<"]],"start1":2940,"start2":2940,"length1":30,"length2":23}]],"length":2995,"saved":false}
