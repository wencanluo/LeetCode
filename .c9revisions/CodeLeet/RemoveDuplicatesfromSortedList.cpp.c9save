{"ts":1374685555678,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*Given a sorted linked list, delete all duplicates such that each element appear only once.\r\n\r\nFor example,\r\nGiven 1->1->2, return 1->2.\r\nGiven 1->1->2->3->3, return 1->2->3.\r\n\r\n\r\nRemove Duplicates from Sorted List IIApr 22 '123822 / 11907\r\nGiven a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.\r\n\r\nFor example,\r\nGiven 1->2->3->3->4->4->5, return 1->2->5.\r\nGiven 1->1->1->2->3, return 2->3.\r\n\r\nAuthor: Wencan Luo\r\nLanguage: C++\r\nDate: 07/23/2013\r\n*/\r\n\r\n#include<iostream>\r\nusing namespace std;\r\n\r\n#include<vector>\r\n#include<string>\r\n#include<algorithm>\r\n\r\n#include<map>\r\n//#include<unordered_set>\r\n\r\n#include<queue>\r\n#include<set>\r\n\r\nstruct TreeNode {\r\n    int val;\r\n\tTreeNode *left;\r\n\tTreeNode *right;\r\n\tTreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n};\r\n\r\n\r\n//Definition for singly-linked list.\r\nstruct ListNode {\r\n    int val;\r\n    ListNode *next;\r\n    ListNode(int x) : val(x), next(NULL) {}\r\n};\r\n \r\nclass Solution {\r\npublic:\r\n    ListNode *deleteDuplicatesI(ListNode *head) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        if (NULL == head) return NULL;\r\n        \r\n        ListNode *p, *q;\r\n        p = head;\r\n        q = p->next;\r\n        \r\n        while(q != NULL){\r\n            if(p->val == q->val){\r\n                //remove q\r\n                p->next = q->next;\r\n                delete(q);\r\n                q = p->next;\r\n            }else{\r\n                p = q;\r\n                q = q->next;\r\n            }\r\n        }\r\n        \r\n        return head;\r\n    }\r\n    \r\n    ListNode *deleteDuplicates(ListNode *head) {\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        if (NULL == head) return NULL;\r\n        \r\n        ListNode *p, *q, *r;\r\n        p = NULL;\r\n        q = head;\r\n        r = q->next;\r\n        \r\n        bool flag = false;\r\n        \r\n        while(r != NULL){\r\n            if(q->val == r->val){\r\n                //remove r\r\n                q->next = r->next;\r\n                delete(r);\r\n                r = q->next;\r\n                flag = true;\r\n            }else{\r\n                if(flag){//delete q\r\n                    if(NULL == p){//head\r\n                        delete(q);\r\n                        q = r;\r\n\t\t\t\t\t\tr = r->next;\r\n\t\t\t\t\t\thead = q;\r\n                    }else{\r\n\t\t\t\t\t\tp->next = r;\r\n                        delete(q);\r\n\t\t\t\t\t\tq = r;\r\n\t\t\t\t\t\tr = r->next;\r\n                    }\r\n\t\t\t\t\tflag = false;\r\n                }else{\r\n\t\t\t\t\tp = q;\r\n\t\t\t\t\tq = r;\r\n\t\t\t\t\tr = r->next;\r\n\t\t\t\t}\r\n            }\r\n        }\r\n\r\n\t\tif(flag){//delete the last one\r\n\t\t\tif(NULL == p){//head\r\n                delete(q);\r\n\t\t\t\thead = r;\r\n            }else{\r\n\t\t\t\tp->next = r;\r\n                delete(q);\r\n            }\r\n\t\t}\r\n        \r\n        return head;\r\n    }\r\n};\r\n\r\nint main(){\r\n\tSolution s;\r\n    \r\n\tListNode *a = new ListNode(2);\r\n\tListNode *b = new ListNode(2);\r\n\tListNode *c = new ListNode(2);\r\n\tListNode *d = new ListNode(2);\r\n\t\r\n\ta->next = b;\r\n\tb->next = c;\r\n\tc->next = d;\r\n\r\n\tListNode *p = s.deleteDuplicates(a);\r\n\r\n\twhile(p!=NULL){\r\n\t\tcout << p->val << \",\";\r\n\t\tp = p->next;\r\n\t}\r\n\tcout << endl;\r\n\r\n\tsystem(\"pause\");\r\n    return 0;\t\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":3241}]],"length":3241}
