{"ts":1377041633680,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*3SumJan 18 '123993 / 15001\r\nGiven an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\r\n\r\nNote:\r\n\r\nElements in a triplet (a,b,c) must be in non-descending order. (ie, a ? b ? c)\r\nThe solution set must not contain duplicate triplets.\r\n    For example, given array S = {-1 0 1 2 -1 -4},\r\n\r\n    A solution set is:\r\n    (-1, 0, 1)\r\n    (-1, -1, 2)\r\n\t\r\nAuthor: Wencan Luo\r\nLanguage: C++\r\nDate: 08/29/2012\t\r\n*/\r\n\t\r\n#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n\r\nusing namespace std;\r\n\r\nclass Solution {\r\npublic:\r\n\tvector<vector<int> > threeSum(vector<int> &num) {//n^2\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        vector< vector<int> > res;\r\n\r\n\t\tif(num.size() < 3) return res;\r\n\r\n\t\t//sort\r\n\t\tsort(num.begin(), num.end());\r\n\r\n\t\t//check one by one\r\n\t\tvector<int>::iterator it1,it2,it3;\r\n\r\n\t\tfor(it1=num.begin();it1<num.end()-2;it1++)\r\n\t\t{\r\n\t\t\tit2 = it1+1;\r\n\t\t\tit3 = num.end() - 1;\r\n\t\t\twhile(it2 < it3)\r\n\t\t\t{\r\n\t\t\t\tif(0 == *it1 + *it2 + *it3)//adjust the pos according to the sum\r\n\t\t\t\t{\r\n\t\t\t\t\tvector<int> tmp;\r\n\t\t\t\t\ttmp.push_back(*it1);\r\n\t\t\t\t\ttmp.push_back(*it2);\r\n\t\t\t\t\ttmp.push_back(-*it1 - *it2);\r\n\t\t\t\t\tres.push_back(tmp);\r\n\t\t\t\t\tit2++;\r\n\t\t\t\t\tit3--;\r\n\t\t\t\t}\r\n\t\t\t\telse if(0 < *it1 + *it2 + *it3)\r\n\t\t\t\t{\r\n\t\t\t\t\tit3--;\r\n\t\t\t\t}\r\n\t\t\t\telse // 0 > ..\r\n\t\t\t\t{\r\n\t\t\t\t\tit2++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//remove duplicate ones\r\n\t\tsort(res.begin(), res.end());\r\n\t\tvector< vector<int> >::iterator it;\r\n\t\tit = unique(res.begin(), res.end());\r\n\t\tres.resize(it - res.begin());\r\n\r\n\t\treturn res;\r\n    }\r\n\r\n    vector<vector<int> > threeSum2(vector<int> &num) {//n^2 log(n)\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        vector< vector<int> > res;\r\n\r\n\t\t//sort\r\n\t\tsort(num.begin(), num.end());\r\n\r\n\t\t//check one by one\r\n\t\tvector<int>::iterator it1,it2,it3;\r\n\r\n\t\tfor(it1=num.begin();it1<num.end();it1++)\r\n\t\t{\r\n\t\t\tfor(it2=it1+1;it2<num.end();it2++)\r\n\t\t\t{\r\n\t\t\t\t//divide and conque to find the third one\r\n\t\t\t\tif( true == binary_search(it2+1, num.end(), -*it1 - *it2))\r\n\t\t\t\t{\r\n\t\t\t\t\tvector<int> tmp;\r\n\t\t\t\t\ttmp.push_back(*it1);\r\n\t\t\t\t\ttmp.push_back(*it2);\r\n\t\t\t\t\ttmp.push_back(-*it1 - *it2);\r\n\t\t\t\t\tres.push_back(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//remove duplicate ones\r\n\t\tsort(res.begin(), res.end());\r\n\t\tvector< vector<int> >::iterator it;\r\n\t\tit = unique(res.begin(), res.end());\r\n\t\tres.resize(it - res.begin());\r\n\r\n\t\treturn res;\r\n    }\r\n\r\n\tvector<vector<int> > threeSum1(vector<int> &num) {//n^3\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        vector< vector<int> > res;\r\n\r\n\t\t//sort\r\n\t\tsort(num.begin(), num.end());\r\n\r\n\t\t//check one by one\r\n\t\tvector<int>::iterator it1,it2,it3;\r\n\r\n\t\tfor(it1=num.begin();it1<num.end();it1++)\r\n\t\t{\r\n\t\t\tfor(it2=it1+1;it2<num.end();it2++)\r\n\t\t\t{\r\n\t\t\t\tfor(it3=it2+1;it3<num.end();it3++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(0 == *it1 + *it2 + *it3)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvector<int> tmp;\r\n\t\t\t\t\t\ttmp.push_back(*it1);\r\n\t\t\t\t\t\ttmp.push_back(*it2);\r\n\t\t\t\t\t\ttmp.push_back(*it3);\r\n\t\t\t\t\t\tres.push_back(tmp);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//remove duplicate ones\r\n\t\tsort(res.begin(), res.end());\r\n\t\tvector< vector<int> >::iterator it;\r\n\t\tit = unique(res.begin(), res.end());\r\n\t\tres.resize(it - res.begin());\r\n\r\n\t\treturn res;\r\n    }\r\n};\r\n\r\nvoid main()\r\n{\r\n\tint a[] = {1};\r\n\tvector<int> num(a, a + sizeof(a)/sizeof(int));\r\n\r\n\tSolution s;\r\n\tvector<vector<int> > sum = s.threeSum(num);\r\n\r\n\tvector<vector<int> >::iterator iter;\r\n\r\n\tfor(iter=sum.begin();iter<sum.end();iter++)\r\n\t{\r\n\t\tvector<int>::iterator it;\r\n\r\n\t\tfor(it = (*iter).begin(); it < (*iter).end(); it++)\r\n\t\t{\r\n\t\t\tcout << *it << \",\";\r\n\t\t}\r\n\t\tcout << endl;\r\n\t}\r\n\r\n\tsystem(\"pause\");\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":3771}]],"length":3771}
{"contributors":[],"silentsave":false,"ts":1377041635505,"patch":[[{"diffs":[[0,"/*3"],[1," "],[0,"Sum"],[1," Closest "],[0,"Jan 18 '"]],"start1":0,"start2":0,"length1":14,"length2":24},{"diffs":[[0," '12"],[-1,"3993 / 15001"],[1,"5687 / 14868"],[0,"\r\nGi"]],"start1":22,"start2":22,"length1":20,"length2":20},{"diffs":[[0,"rs, "],[-1,"are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\r\n\r\nNote:\r\n\r\nElements in a triplet (a,b,c) must be in non-descending order. (ie, a ? b ? c)\r\nThe solution set must not contain duplicate triplets."],[1,"find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\r\n"],[0,"\r\n  "]],"start1":68,"start2":68,"length1":277,"length2":192},{"diffs":[[0,"{-1 "],[-1,"0 1 "],[0,"2 "],[-1,"-"],[0,"1 -4},"],[-1,"\r\n\r\n    A solution set is:\r\n    (-1, 0, 1)\r\n    (-1, -1,"],[1," and target = 1.\r\n\r\n    The sum that is closest to the target is 2. (-1 + 2 + 1 ="],[0," 2)"],[1,"."],[0,"\r\n"],[-1,"\t"],[1,"    "],[0,"\r\nAu"]],"start1":291,"start2":291,"length1":83,"length2":107},{"diffs":[[0,"/29/2012"],[-1,"\t"],[1,"    "],[0,"\r\n*/\r\n\t\r"]],"start1":439,"start2":439,"length1":17,"length2":20},{"diffs":[[0,"ublic:\r\n"],[-1,"\tvector<vector<int> >"],[1,"    int"],[0," threeSu"]],"start1":567,"start2":567,"length1":37,"length2":23},{"diffs":[[0,"threeSum"],[1,"Closest"],[0,"(vector<"]],"start1":583,"start2":583,"length1":16,"length2":23},{"diffs":[[0,"nt> &num"],[-1,") {//n^2"],[1,", int target) {"],[0,"\r\n      "]],"start1":607,"start2":607,"length1":24,"length2":31},{"diffs":[[0,"    "],[-1,"vector< vector<int> > res;\r\n\r\n\t\tif(num.size() < 3) return res;\r\n\r\n\t\t//sort\r\n\t\tsort(num.begin(), num.end());\r\n\r\n\t\t//check one by one\r\n\t\tvector<int>::iterator it1,it2,it3;\r\n\r\n\t\tfor(it1=num.begin();it1<num.end()-2;it1++)\r\n\t\t{\r\n\t\t\tit2 = it1+1;\r\n\t\t\tit3 = num.end() - 1;\r\n\t\t\twhile(it2 < it3)\r\n\t\t\t{\r\n\t\t\t\tif(0 == *it1 + *it2 + *it3)//adjust the pos according to the sum\r\n\t\t\t\t{\r\n\t\t\t\t\tvector<int> tmp;\r\n\t\t\t\t\ttmp.push_back(*it1);\r\n\t\t\t\t\ttmp.push_back(*it2);\r\n\t\t\t\t\ttmp.push_back(-*it1 - *it2);\r\n\t\t\t\t\tres.push_back(tmp);\r\n\t\t\t\t\tit2++;\r\n\t\t\t\t\tit3--;\r\n\t\t\t\t}\r\n\t\t\t\telse if(0 < *it1 + *it2 + *it3)\r\n\t\t\t\t{\r\n\t\t\t\t\tit3--;\r\n\t\t\t\t}\r\n\t\t\t\telse // 0 > ..\r\n\t\t\t\t{\r\n\t\t\t\t\tit2++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//remove duplicate ones\r\n\t\tsort(res.begin(), res.end());\r\n\t\tvector< vector<int> >::iterator it;\r\n\t\tit = unique(res.begin(), res.end());\r\n\t\tres.resize(it - res.begin());\r\n\r\n\t\treturn res;\r\n    }\r\n\r\n    vector<vector<int> > threeSum2(vector<int> &num) {//n^2 log(n)\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        vector< vector<int> > res;\r\n\r\n\t\t//sort\r\n\t\tsort(num.begin(), num.end());\r\n\r\n\t\t//check one by one\r\n\t\tvector<int>::iterator it1,it2,it3;\r\n\r\n\t\tfor(it1=num.begin();it1<num.end();it1++)\r\n\t\t{\r\n\t\t\tfor(it2=it1+1;it2<num.end();it2++)\r\n\t\t\t{\r\n\t\t\t\t//divide and conque to find the third one\r\n\t\t\t\tif( true == binary_search(it2+1, num.end(), -*it1 - *it2))\r\n\t\t\t\t{\r\n\t\t\t\t\tvector<int> tmp;\r\n\t\t\t\t\ttmp.push_back(*it1);\r\n\t\t\t\t\ttmp.push_back(*it2);\r\n\t\t\t\t\ttmp.push_back(-*it1 - *it2);"],[1,"int n=num.size();\r\n        if(n<=2) return 0;\r\n\t\t\r\n\t\tint sum = 0;\r\n\t\tint closestSum = num[0] + num[1] + num[2];\r\n\r\n\t\tsort(num.begin(), num.end());\r\n\r\n\t\tfor(int i=0;i<n;i++){\r\n\t\t\tint j = i + 1;\r\n\t\t\tint k = n-1;\r\n\r\n\t\t\twhile(j < k){"],[0,"\r\n\t\t\t\t"],[-1,"\t"],[-1,"res.push_back(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//remove duplicate ones\r\n\t\tsort(res.begin(), res.end());\r\n\t\tvector< vector<int> >::iterator it;\r\n\t\tit = unique(res.begin(), res.end())"],[1,"sum = num[i] + num[j] + num[k]"],[0,";\r\n\t\t"],[1,"\t"],[-1,"res.resize(it - res.begin());\r\n\r\n\t\treturn res;\r\n    }\r\n\r\n\tvector<vector<int> > threeSum1(vector<int> &num) {//n^3\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        vector< vector<int> > res;\r\n\r\n\t\t//sort\r\n\t\tsort(num.begin(), num.end());\r\n\r\n\t\t//check one by one\r\n\t\tvector<int>::iterator it1,it2,it3;\r\n\r\n\t\tfor(it1=num.begin();it1<num.end();it1++)\r\n\t\t{\r\n\t\t\tfor(it2=it1+1;it2<num.end();it2++)\r\n\t\t\t{\r\n\t\t\t\tfor(it3=it2+1;it3<num.end();it3++)"],[1,"\tif(abs(sum-target) < abs(closestSum - target)){\r\n\t\t\t\t\tclosestSum = sum;"],[0,"\r\n\t\t\t\t"],[-1,"{"],[1,"}\r\n"],[0,"\r\n"],[-1,"\t"],[0,"\t\t\t\tif("],[-1,"0"],[1,"sum"],[0," == "],[-1,"*it1 + *it2 + *it3)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvector<int> tmp;\r\n\t\t\t\t\t\ttmp.push_back(*it1);\r\n\t\t\t\t\t\ttmp.push_back(*it2);\r\n\t\t\t\t\t\ttmp.push_back(*it3);\r\n\t\t\t\t\t\tres.push_back(tmp);"],[1,"target) return target;\r\n\t\t\t\tif(sum < target){\r\n\t\t\t\t\tj++;\r\n\t\t\t\t}else{"],[0,"\r\n\t\t\t\t\t"],[-1,"}"],[1,"k--;"],[0,"\r\n\t\t"]],"start1":732,"start2":732,"length1":2371,"length2":455},{"diffs":[[0,"\t}\r\n"],[-1,"\r\n\t\t//remove duplicate ones\r\n\t\tsort(res.begin(), res.end());\r\n\t\tvector< vector<int> >::iterator it;\r\n\t\tit = unique(res.begin(), res.end());\r\n\t\tres.resize(it - res.begin());\r\n\r\n\t\treturn res"],[1,"\t\treturn closestSum"],[0,";\r\n "]],"start1":1199,"start2":1199,"length1":196,"length2":27},{"diffs":[[0,"n()\r\n{\r\n"],[1,"\tSolution s;\r\n\r\n"],[0,"\tint a[]"]],"start1":1246,"start2":1246,"length1":16,"length2":32},{"diffs":[[0,"a[] = {1"],[1,",2,3"],[0,"};\r\n\tvec"]],"start1":1275,"start2":1275,"length1":16,"length2":20},{"diffs":[[0,"nt> "],[-1,"num"],[1,"v"],[0,"(a, a"],[-1," + "],[1,"+"],[0,"size"]],"start1":1300,"start2":1300,"length1":19,"length2":15},{"diffs":[[0,"eof("],[-1,"int"],[1,"a[0]"],[0,"));\r\n\r\n\t"],[-1,"Solution s;\r\n\tvector<vector<int> > sum = s.threeSum(num);\r\n\r\n\tvector<vector<int> >::iterator iter;\r\n\r\n\tfor(iter=sum.begin();iter<sum.end();iter++)\r\n\t{\r\n\t\tvector<int>::iterator it;\r\n\r\n\t\tfor(it = (*iter).begin(); it < (*iter).end(); it++)\r\n\t\t{\r\n\t\t\tcout << *it << \",\";\r\n\t\t}\r\n\t\tcout << endl;\r\n\t}"],[1,"cout << s.threeSumClosest(v, 0);"],[0,"\r\n\r\n"]],"start1":1324,"start2":1324,"length1":310,"length2":52}]],"length":1396,"saved":false}
{"ts":1377041643365,"patch":[[{"diffs":[[0,"/*"],[-1,"3"],[1,"Two"],[0," Sum"],[-1," Closest Jan 18 '12568"],[1,"Mar 14 '111435"],[0,"7 / "],[-1,"1"],[1,"45"],[0,"486"],[-1,"8"],[0,"\r\nGi"]],"start1":0,"start2":0,"length1":42,"length2":36},{"diffs":[[0,"ray "],[-1,"S "],[0,"of "],[-1,"n "],[0,"inte"]],"start1":45,"start2":45,"length1":15,"length2":11},{"diffs":[[0,"nd t"],[-1,"hree integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\r\n\r\n    For example, given array S = {-1 2 1 -4}, and target = 1.\r\n\r\n    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2)."],[1,"wo numbers such that they add up to a specific target number.\r\n\r\nThe function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.\r\n\r\nYou may assume that each input would have exactly one solution.\r\n\r\nInput: numbers={2, 7, 11, 15}, target=9\r\nOutput: index1=1, index2=2"],[0,"\r\n  "]],"start1":64,"start2":64,"length1":318,"length2":431}]],"length":1499,"saved":false}
{"ts":1377041647459,"patch":[[{"diffs":[[0,"te: 08/2"],[-1,"9"],[1,"0"],[0,"/2012   "]],"start1":536,"start2":536,"length1":17,"length2":17}]],"length":1499,"saved":false}
{"ts":1377041649158,"patch":[[{"diffs":[[0,"/201"],[-1,"2    "],[1,"3"],[0,"\r\n*/"]],"start1":545,"start2":545,"length1":13,"length2":9}]],"length":1495,"saved":false}
{"ts":1377041665247,"patch":[[{"diffs":[[0,"    "],[1,"vector<"],[0,"int"],[1,">"],[0," t"],[-1,"hreeSumClosest"],[1,"woSum"],[0,"(vec"]],"start1":674,"start2":674,"length1":27,"length2":26},{"diffs":[[0,"nt> &num"],[1,"bers"],[0,", int ta"]],"start1":705,"start2":705,"length1":16,"length2":20},{"diffs":[[0,"on\r\n"],[1,""],[0,"        "],[-1,"int n=num.size();\r\n        if(n<=2) return 0;\r\n\t\t\r\n\t\tint sum = 0;\r\n\t\tint closestSum = num[0] + num[1] + num[2];\r\n\r\n\t\tsort(num.begin(), num.end());\r\n\r\n\t\tfor(int i=0;i<n;i++){\r\n\t\t\tint j = i + 1;\r\n\t\t\tint k = n-1;\r\n\r\n\t\t\twhile(j < k){\r\n\t\t\t\tsum = num[i] + num[j] + num[k];\r\n\t\t\t\tif(abs(sum-target) < abs(closestSum - target)){\r\n\t\t\t\t\tclosestSum = sum;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(sum == target) return target;\r\n\t\t\t\tif(sum < target){\r\n\t\t\t\t\tj++;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tk--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn closestSum;"],[0,"\r\n  "]],"start1":826,"start2":826,"length1":503,"length2":16}]],"length":1011,"saved":false}
{"ts":1377042585391,"patch":[[{"diffs":[[0,"*Two Sum"],[-1,""],[0,""],[1," "],[0,"Mar 14 '"]],"start1":1,"start2":1,"length1":16,"length2":17},{"diffs":[[0,"13\r\n*/\r\n"],[-1,"\t"],[1,"    "],[0,"\r\n#inclu"]],"start1":549,"start2":549,"length1":17,"length2":20},{"diffs":[[0,"ublic:\r\n"],[1,"\t\r\n\tstruct Compare{\r\n\t\tbool operator()(pair<int, int> a, pair<int, int> b){\r\n\t\t\treturn a.first < b.first;\r\n\t\t}\r\n\t}compare;\r\n\r\n"],[0,"    vect"]],"start1":670,"start2":670,"length1":16,"length2":142},{"diffs":[[0,"        "],[1,"int left = -1;\r\n\t\tint right = -1;\r\n\r\n\t\tint n = numbers.size();\r\n\r\n\t\tvector<pair<int, int>> A;\r\n\t\tA.resize(n);\r\n\t\tfor(int i=0;i<n;i++){\r\n\t\t\tA[i] = make_pair(numbers[i], i+1);\r\n\t\t}\r\n\r\n\t\tsort(A.begin(), A.end(), compare);\r\n\r\n\t\tint i = 0;\r\n\t\tint j = n-1;\r\n\t\twhile(i < j){\r\n\t\t\tint sum = A[i].first + A[j].first;\r\n\t\t\tif(sum == target){\r\n\t\t\t\tleft = A[i].second;\r\n\t\t\t\tright = A[j].second;\r\n\t\t\t\tbreak;\r\n\t\t\t}else if(sum < target){\r\n\t\t\t\ti++;\r\n\t\t\t}else{\r\n\t\t\t\tj--;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvector<int> r;\r\n\t\tif(left < right){\r\n\t\t\tr.push_back(left);\r\n\t\t\tr.push_back(right);\r\n\t\t}else{\r\n\t\t\tr.push_back(right);\r\n\t\t\tr.push_back(left);\r\n\t\t}\r\n\t\treturn r;"],[0,"\r\n    }\r"]],"start1":960,"start2":960,"length1":16,"length2":641},{"diffs":[[0,"\r\n\r\n"],[-1,"\tcout << s.threeSumClosest(v, 0);\r\n\r\n"],[0,"\tsys"]],"start1":1705,"start2":1705,"length1":45,"length2":8}]],"length":1729,"saved":false}
