{"ts":1375513100297,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\r\nGiven an array of strings, return all groups of strings that are anagrams.\r\nAn anagram is a type of word play, the result of rearranging the letters of a word or phrase to produce a new word or phrase, using all the original letters exactly once;\r\nNote: All inputs will be in lower-case.\r\n\r\nAuthor: Wencan Luo\r\nLanguage: C++\r\nDate: 08/31/2012\r\n*/\r\n\r\n#include<iostream>\r\n#include<string>\r\n#include<vector>\r\n#include<map>\r\n#include<algorithm>\r\n\r\nusing namespace std;\r\n\r\nclass Solution {\r\npublic:\r\n\r\n\tstring generate_bits(string &t)\r\n\t{\r\n\t\tstring bits;\r\n\r\n\t\tfor(int i=0;i<26;i++)\r\n\t\t{\r\n\t\t\tbits.push_back('0');\r\n\t\t}\r\n\r\n\t\tfor(int i=0;i<t.size();i++)\r\n\t\t{\r\n\t\t\tbits[t[i]-'a']++;\r\n\t\t}\r\n\r\n\t\treturn bits;\r\n\t}\r\n\r\n\tvector<string> anagrams(vector<string> &strs) {//\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        map<string, int> bitmap;\r\n\t\tmap<string, string> stringmap;\r\n\r\n\t\t//add one by one to the contrainer\r\n\t\tvector< string >::iterator it;\r\n\r\n\t\tfor(it = strs.begin(); it < strs.end(); it++)\r\n\t\t{\r\n\t\t\t//generate the anagrams list\r\n\t\t\tstring t = *it;\r\n\t\t\tstring bits = generate_bits(t);\r\n\t\t\tstringmap[t] = bits;\r\n\r\n\t\t\tif( bitmap[bits] != NULL)\r\n\t\t\t\tbitmap[bits] ++;\r\n\t\t\telse\r\n\t\t\t\tbitmap[bits] = 1;\r\n\t\t}\r\n\r\n\t\tvector< string > res;\r\n\t\tfor(it = strs.begin(); it < strs.end(); it++)\r\n\t\t{\r\n\t\t\tstring t = *it;\r\n\t\t\tif(bitmap[stringmap[t]] > 1)\r\n\t\t\t\tres.push_back(t);\r\n\t\t}\r\n\r\n        return res;\r\n    }\r\n\r\n\tvector<string> generate_anagrams(string t)\r\n\t{\r\n\t\tvector<string> res;\r\n\t\tint n = t.size();\r\n\r\n\t\tfor(int i=0;i<n;i++)\r\n\t\t{\r\n\t\t\tstring tmp = t.substr(i,n-i) + t.substr(0,i);\r\n\t\t\tres.push_back(tmp);\r\n\t\t}\r\n\r\n\t\t//center anagram\r\n\t\tstring::reverse_iterator it;\r\n\t\tstring ra;\r\n\t\tfor(it = t.rbegin(); it < t.rend(); it++)\r\n\t\t{\r\n\t\t\tra.push_back(*it);\r\n\t\t}\r\n\t\tres.push_back(ra);\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n    vector<string> anagrams_overtime(vector<string> &strs) {//\r\n        // Start typing your C/C++ solution below\r\n        // DO NOT write int main() function\r\n        vector< vector<string> > container;\r\n\r\n\t\t//add one by one to the contrainer\r\n\t\tvector< string >::iterator it;\r\n\r\n\t\tfor(it = strs.begin(); it < strs.end(); it++)\r\n\t\t{\r\n\t\t\t//generate the anagrams list\r\n\t\t\tstring t = *it;\r\n\t\t\tvector<string> anas = generate_anagrams(t);\r\n\r\n\t\t\tint cit;\r\n\r\n\t\t\tbool flag = false;\r\n\t\t\tfor(cit = 0; cit < container.size(); cit++)\r\n\t\t\t{\r\n\t\t\t\t//set the flag\t\r\n\t\t\t\tvector<string>::iterator ait;\r\n\t\t\t\tfor(ait = anas.begin(); ait < anas.end(); ait++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(find(container[cit].begin(), container[cit].end(), *ait) != container[cit].end())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcontainer[cit].push_back(t);\r\n\t\t\t\t\t\tflag = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(flag) break;\r\n\t\t\t}\r\n\r\n\t\t\tif(!flag)//no anagrams found\r\n\t\t\t{\r\n\t\t\t\tvector<string> tmp;\r\n\t\t\t\ttmp.push_back(*it);\r\n\t\t\t\tcontainer.push_back(tmp);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvector< string > res;\r\n\t\tint cit;\r\n\r\n\t\tfor(cit = 0; cit < container.size(); cit++)\r\n\t\t{\r\n\t\t\tif( container[cit].size() > 1)\r\n\t\t\t{\r\n\t\t\t\tint it2;\r\n\t\t\t\tfor(it2 = 0; it2< container[cit].size(); it2++)\r\n\t\t\t\t{\r\n\t\t\t\t\tres.push_back(container[cit][it2]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n        return res;\r\n    }\r\n};\r\n\r\n\r\nvoid main()\r\n{\r\n\tstring s[] = {\"cab\",\"pug\",\"pei\",\"nay\",\"ron\",\"rae\",\"ems\",\"ida\",\"mes\"};\r\n\r\n\tvector<string> vc(s, s + sizeof(s)/sizeof(string));\r\n\r\n\tSolution ss;\r\n\tvector<string> res = ss.anagrams(vc);\r\n\r\n\t//res = ss.generate_anagrams(\"abcd\");\r\n\r\n\tvector<string>::iterator it;\r\n\r\n\tfor(it = res.begin(); it < res.end(); it++)\r\n\t{\r\n\t\tcout << *it << \", \";\r\n\t}\r\n\r\n\tsystem(\"pause\");\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":3523}]],"length":3523}
